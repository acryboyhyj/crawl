// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spider.proto

#include "spider.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_spider_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CrawlUrl_spider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spider_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Feature_spider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spider_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LinkRule_spider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spider_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Runtime_spider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spider_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Segment_spider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spider_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Storage_spider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spider_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CrawlUrlList_spider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spider_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LinkRuleList_spider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spider_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SegmentList_spider_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spider_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CrawlDoc_spider_2eproto;
namespace spiderproto {
class CrawlUrlDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CrawlUrl> _instance;
} _CrawlUrl_default_instance_;
class FeatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Feature> _instance;
} _Feature_default_instance_;
class LinkRuleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LinkRule> _instance;
} _LinkRule_default_instance_;
class StorageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Storage> _instance;
} _Storage_default_instance_;
class RuntimeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Runtime> _instance;
} _Runtime_default_instance_;
class BasicTaskDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BasicTask> _instance;
} _BasicTask_default_instance_;
class CrawlUrlListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CrawlUrlList> _instance;
} _CrawlUrlList_default_instance_;
class LinkRuleListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LinkRuleList> _instance;
} _LinkRuleList_default_instance_;
class CrawlingTaskDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CrawlingTask> _instance;
} _CrawlingTask_default_instance_;
class CrawledTaskDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CrawledTask> _instance;
} _CrawledTask_default_instance_;
class CrawlStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CrawlStats> _instance;
} _CrawlStats_default_instance_;
class TaskResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskResponse> _instance;
} _TaskResponse_default_instance_;
class EmptyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Empty> _instance;
} _Empty_default_instance_;
class FetcherDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Fetcher> _instance;
} _Fetcher_default_instance_;
class SegmentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Segment> _instance;
} _Segment_default_instance_;
class SegmentListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SegmentList> _instance;
} _SegmentList_default_instance_;
class CrawlDocDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CrawlDoc> _instance;
} _CrawlDoc_default_instance_;
class CrawlDocsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CrawlDocs> _instance;
} _CrawlDocs_default_instance_;
class PingRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PingRequest> _instance;
} _PingRequest_default_instance_;
class PingResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PingResponse> _instance;
} _PingResponse_default_instance_;
}  // namespace spiderproto
static void InitDefaultsCrawlUrl_spider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spiderproto::_CrawlUrl_default_instance_;
    new (ptr) ::spiderproto::CrawlUrl();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spiderproto::CrawlUrl::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CrawlUrl_spider_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCrawlUrl_spider_2eproto}, {}};

static void InitDefaultsFeature_spider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spiderproto::_Feature_default_instance_;
    new (ptr) ::spiderproto::Feature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spiderproto::Feature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Feature_spider_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFeature_spider_2eproto}, {}};

static void InitDefaultsLinkRule_spider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spiderproto::_LinkRule_default_instance_;
    new (ptr) ::spiderproto::LinkRule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spiderproto::LinkRule::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LinkRule_spider_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLinkRule_spider_2eproto}, {}};

static void InitDefaultsStorage_spider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spiderproto::_Storage_default_instance_;
    new (ptr) ::spiderproto::Storage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spiderproto::Storage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Storage_spider_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStorage_spider_2eproto}, {}};

static void InitDefaultsRuntime_spider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spiderproto::_Runtime_default_instance_;
    new (ptr) ::spiderproto::Runtime();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spiderproto::Runtime::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Runtime_spider_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRuntime_spider_2eproto}, {}};

static void InitDefaultsBasicTask_spider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spiderproto::_BasicTask_default_instance_;
    new (ptr) ::spiderproto::BasicTask();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spiderproto::BasicTask::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_BasicTask_spider_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsBasicTask_spider_2eproto}, {
      &scc_info_CrawlUrlList_spider_2eproto.base,
      &scc_info_Feature_spider_2eproto.base,
      &scc_info_LinkRuleList_spider_2eproto.base,
      &scc_info_Storage_spider_2eproto.base,
      &scc_info_Runtime_spider_2eproto.base,}};

static void InitDefaultsCrawlUrlList_spider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spiderproto::_CrawlUrlList_default_instance_;
    new (ptr) ::spiderproto::CrawlUrlList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spiderproto::CrawlUrlList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CrawlUrlList_spider_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCrawlUrlList_spider_2eproto}, {
      &scc_info_CrawlUrl_spider_2eproto.base,}};

static void InitDefaultsLinkRuleList_spider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spiderproto::_LinkRuleList_default_instance_;
    new (ptr) ::spiderproto::LinkRuleList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spiderproto::LinkRuleList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LinkRuleList_spider_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLinkRuleList_spider_2eproto}, {
      &scc_info_LinkRule_spider_2eproto.base,}};

static void InitDefaultsCrawlingTask_spider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spiderproto::_CrawlingTask_default_instance_;
    new (ptr) ::spiderproto::CrawlingTask();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spiderproto::CrawlingTask::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_CrawlingTask_spider_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsCrawlingTask_spider_2eproto}, {
      &scc_info_CrawlUrl_spider_2eproto.base,
      &scc_info_LinkRule_spider_2eproto.base,
      &scc_info_Storage_spider_2eproto.base,}};

static void InitDefaultsCrawledTask_spider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spiderproto::_CrawledTask_default_instance_;
    new (ptr) ::spiderproto::CrawledTask();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spiderproto::CrawledTask::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CrawledTask_spider_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCrawledTask_spider_2eproto}, {
      &scc_info_CrawlUrl_spider_2eproto.base,}};

static void InitDefaultsCrawlStats_spider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spiderproto::_CrawlStats_default_instance_;
    new (ptr) ::spiderproto::CrawlStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spiderproto::CrawlStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CrawlStats_spider_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCrawlStats_spider_2eproto}, {}};

static void InitDefaultsTaskResponse_spider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spiderproto::_TaskResponse_default_instance_;
    new (ptr) ::spiderproto::TaskResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spiderproto::TaskResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TaskResponse_spider_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTaskResponse_spider_2eproto}, {}};

static void InitDefaultsEmpty_spider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spiderproto::_Empty_default_instance_;
    new (ptr) ::spiderproto::Empty();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spiderproto::Empty::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Empty_spider_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEmpty_spider_2eproto}, {}};

static void InitDefaultsFetcher_spider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spiderproto::_Fetcher_default_instance_;
    new (ptr) ::spiderproto::Fetcher();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spiderproto::Fetcher::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Fetcher_spider_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFetcher_spider_2eproto}, {}};

static void InitDefaultsSegment_spider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spiderproto::_Segment_default_instance_;
    new (ptr) ::spiderproto::Segment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spiderproto::Segment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Segment_spider_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSegment_spider_2eproto}, {}};

static void InitDefaultsSegmentList_spider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spiderproto::_SegmentList_default_instance_;
    new (ptr) ::spiderproto::SegmentList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spiderproto::SegmentList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SegmentList_spider_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSegmentList_spider_2eproto}, {
      &scc_info_Segment_spider_2eproto.base,}};

static void InitDefaultsCrawlDoc_spider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spiderproto::_CrawlDoc_default_instance_;
    new (ptr) ::spiderproto::CrawlDoc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spiderproto::CrawlDoc::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CrawlDoc_spider_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCrawlDoc_spider_2eproto}, {
      &scc_info_Storage_spider_2eproto.base,
      &scc_info_SegmentList_spider_2eproto.base,}};

static void InitDefaultsCrawlDocs_spider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spiderproto::_CrawlDocs_default_instance_;
    new (ptr) ::spiderproto::CrawlDocs();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spiderproto::CrawlDocs::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CrawlDocs_spider_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCrawlDocs_spider_2eproto}, {
      &scc_info_CrawlDoc_spider_2eproto.base,}};

static void InitDefaultsPingRequest_spider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spiderproto::_PingRequest_default_instance_;
    new (ptr) ::spiderproto::PingRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spiderproto::PingRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PingRequest_spider_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPingRequest_spider_2eproto}, {}};

static void InitDefaultsPingResponse_spider_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::spiderproto::_PingResponse_default_instance_;
    new (ptr) ::spiderproto::PingResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::spiderproto::PingResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PingResponse_spider_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPingResponse_spider_2eproto}, {}};

void InitDefaults_spider_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CrawlUrl_spider_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Feature_spider_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LinkRule_spider_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Storage_spider_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Runtime_spider_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BasicTask_spider_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CrawlUrlList_spider_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LinkRuleList_spider_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CrawlingTask_spider_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CrawledTask_spider_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CrawlStats_spider_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TaskResponse_spider_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Empty_spider_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Fetcher_spider_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Segment_spider_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SegmentList_spider_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CrawlDoc_spider_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CrawlDocs_spider_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PingRequest_spider_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PingResponse_spider_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_spider_2eproto[20];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_spider_2eproto[2];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_spider_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_spider_2eproto::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::CrawlUrl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::CrawlUrl, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::CrawlUrl, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::CrawlUrl, usedable_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::Feature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::Feature, dup_ignore_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::Feature, testing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::Feature, period_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::Feature, interval_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::LinkRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::LinkRule, in_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::LinkRule, rules_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::LinkRule, out_level_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::Storage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::Storage, store_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::Storage, dest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::Storage, attachment_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::Runtime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::Runtime, download_delay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::Runtime, concurrent_reqs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::Runtime, allow_fetchers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::Runtime, deny_fetchers_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::BasicTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::BasicTask, taskid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::BasicTask, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::BasicTask, user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::BasicTask, crawl_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::BasicTask, feature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::BasicTask, rule_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::BasicTask, storage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::BasicTask, runtime_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::CrawlUrlList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::CrawlUrlList, crawl_urls_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::LinkRuleList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::LinkRuleList, rules_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::CrawlingTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::CrawlingTask, taskid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::CrawlingTask, fetcher_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::CrawlingTask, crawl_urls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::CrawlingTask, rules_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::CrawlingTask, storage_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::CrawledTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::CrawledTask, taskid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::CrawledTask, fetcher_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::CrawledTask, crawl_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::CrawledTask, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::CrawledTask, links_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::CrawlStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::CrawlStats, taskid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::CrawlStats, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::CrawlStats, last_update_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::CrawlStats, total_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::CrawlStats, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::CrawlStats, code40x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::CrawlStats, code404_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::CrawlStats, code50x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::CrawlStats, codexxx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::CrawlStats, links_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::TaskResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::TaskResponse, taskid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::TaskResponse, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::TaskResponse, msg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::Fetcher, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::Fetcher, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::Fetcher, addr_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::Segment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::Segment, word_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::Segment, score_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::SegmentList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::SegmentList, segments_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::CrawlDoc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::CrawlDoc, taskid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::CrawlDoc, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::CrawlDoc, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::CrawlDoc, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::CrawlDoc, storage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::CrawlDoc, segment_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::CrawlDocs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::CrawlDocs, taskid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::CrawlDocs, docs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::PingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::PingRequest, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::PingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::PingResponse, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::PingResponse, survive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::spiderproto::PingResponse, msg_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::spiderproto::CrawlUrl)},
  { 8, -1, sizeof(::spiderproto::Feature)},
  { 17, -1, sizeof(::spiderproto::LinkRule)},
  { 25, -1, sizeof(::spiderproto::Storage)},
  { 33, -1, sizeof(::spiderproto::Runtime)},
  { 42, -1, sizeof(::spiderproto::BasicTask)},
  { 55, -1, sizeof(::spiderproto::CrawlUrlList)},
  { 61, -1, sizeof(::spiderproto::LinkRuleList)},
  { 67, -1, sizeof(::spiderproto::CrawlingTask)},
  { 77, -1, sizeof(::spiderproto::CrawledTask)},
  { 87, -1, sizeof(::spiderproto::CrawlStats)},
  { 102, -1, sizeof(::spiderproto::TaskResponse)},
  { 110, -1, sizeof(::spiderproto::Empty)},
  { 115, -1, sizeof(::spiderproto::Fetcher)},
  { 122, -1, sizeof(::spiderproto::Segment)},
  { 129, -1, sizeof(::spiderproto::SegmentList)},
  { 135, -1, sizeof(::spiderproto::CrawlDoc)},
  { 146, -1, sizeof(::spiderproto::CrawlDocs)},
  { 153, -1, sizeof(::spiderproto::PingRequest)},
  { 159, -1, sizeof(::spiderproto::PingResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::spiderproto::_CrawlUrl_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::spiderproto::_Feature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::spiderproto::_LinkRule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::spiderproto::_Storage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::spiderproto::_Runtime_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::spiderproto::_BasicTask_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::spiderproto::_CrawlUrlList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::spiderproto::_LinkRuleList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::spiderproto::_CrawlingTask_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::spiderproto::_CrawledTask_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::spiderproto::_CrawlStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::spiderproto::_TaskResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::spiderproto::_Empty_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::spiderproto::_Fetcher_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::spiderproto::_Segment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::spiderproto::_SegmentList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::spiderproto::_CrawlDoc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::spiderproto::_CrawlDocs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::spiderproto::_PingRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::spiderproto::_PingResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_spider_2eproto = {
  {}, AddDescriptors_spider_2eproto, "spider.proto", schemas,
  file_default_instances, TableStruct_spider_2eproto::offsets,
  file_level_metadata_spider_2eproto, 20, file_level_enum_descriptors_spider_2eproto, file_level_service_descriptors_spider_2eproto,
};

::google::protobuf::internal::DescriptorTable descriptor_table_spider_2eproto = {
  false, InitDefaults_spider_2eproto, 
  "\n\014spider.proto\022\013spiderproto\"O\n\010CrawlUrl\022"
  "\013\n\003url\030\001 \001(\014\022$\n\005level\030\002 \001(\0162\025.spiderprot"
  "o.UrlLevel\022\020\n\010usedable\030\003 \001(\010\"P\n\007Feature\022"
  "\022\n\ndup_ignore\030\001 \001(\010\022\017\n\007testing\030\002 \001(\010\022\016\n\006"
  "period\030\003 \001(\010\022\020\n\010interval\030\004 \001(\005\"l\n\010LinkRu"
  "le\022\'\n\010in_level\030\001 \001(\0162\025.spiderproto.UrlLe"
  "vel\022\r\n\005rules\030\002 \003(\014\022(\n\tout_level\030\003 \001(\0162\025."
  "spiderproto.UrlLevel\"\222\001\n\007Storage\0224\n\nstor"
  "e_type\030\001 \001(\0162 .spiderproto.Storage.Stora"
  "geType\022\014\n\004dest\030\002 \001(\014\022\022\n\nattachment\030\003 \001(\014"
  "\"/\n\013StorageType\022\020\n\014STORAGE_HDFS\020\000\022\016\n\nSTO"
  "RAGE_MQ\020\001\"i\n\007Runtime\022\026\n\016download_delay\030\001"
  " \001(\002\022\027\n\017concurrent_reqs\030\002 \001(\005\022\026\n\016allow_f"
  "etchers\030\003 \003(\014\022\025\n\rdeny_fetchers\030\004 \003(\014\"\211\002\n"
  "\tBasicTask\022\016\n\006taskid\030\001 \001(\014\022\014\n\004name\030\002 \001(\014"
  "\022\014\n\004user\030\003 \001(\014\022-\n\ncrawl_list\030\004 \001(\0132\031.spi"
  "derproto.CrawlUrlList\022%\n\007feature\030\005 \001(\0132\024"
  ".spiderproto.Feature\022,\n\trule_list\030\006 \001(\0132"
  "\031.spiderproto.LinkRuleList\022%\n\007storage\030\007 "
  "\001(\0132\024.spiderproto.Storage\022%\n\007runtime\030\010 \001"
  "(\0132\024.spiderproto.Runtime\"9\n\014CrawlUrlList"
  "\022)\n\ncrawl_urls\030\001 \003(\0132\025.spiderproto.Crawl"
  "Url\"4\n\014LinkRuleList\022$\n\005rules\030\001 \003(\0132\025.spi"
  "derproto.LinkRule\"\247\001\n\014CrawlingTask\022\016\n\006ta"
  "skid\030\001 \001(\014\022\017\n\007fetcher\030\002 \001(\014\022)\n\ncrawl_url"
  "s\030\003 \003(\0132\025.spiderproto.CrawlUrl\022$\n\005rules\030"
  "\004 \003(\0132\025.spiderproto.LinkRule\022%\n\007storage\030"
  "\005 \001(\0132\024.spiderproto.Storage\"\216\001\n\013CrawledT"
  "ask\022\016\n\006taskid\030\001 \001(\014\022\017\n\007fetcher\030\002 \001(\014\022(\n\t"
  "crawl_url\030\003 \001(\0132\025.spiderproto.CrawlUrl\022\016"
  "\n\006status\030\004 \001(\005\022$\n\005links\030\005 \003(\0132\025.spiderpr"
  "oto.CrawlUrl\"\274\001\n\nCrawlStats\022\016\n\006taskid\030\001 "
  "\001(\014\022\022\n\nstart_time\030\002 \001(\014\022\023\n\013last_update\030\003"
  " \001(\014\022\021\n\ttotal_url\030\004 \001(\005\022\017\n\007success\030\005 \001(\005"
  "\022\017\n\007code40x\030\006 \001(\005\022\017\n\007code404\030\007 \001(\005\022\017\n\007co"
  "de50x\030\010 \001(\005\022\017\n\007codexxx\030\t \001(\005\022\r\n\005links\030\n "
  "\001(\005\"9\n\014TaskResponse\022\016\n\006taskid\030\001 \001(\014\022\014\n\004c"
  "ode\030\002 \001(\005\022\013\n\003msg\030\003 \001(\014\"\007\n\005Empty\"%\n\007Fetch"
  "er\022\014\n\004name\030\001 \001(\014\022\014\n\004addr\030\002 \001(\014\"&\n\007Segmen"
  "t\022\014\n\004word\030\001 \001(\014\022\r\n\005score\030\002 \001(\005\"5\n\013Segmen"
  "tList\022&\n\010segments\030\001 \003(\0132\024.spiderproto.Se"
  "gment\"\237\001\n\010CrawlDoc\022\016\n\006taskid\030\001 \001(\014\022\013\n\003ur"
  "l\030\002 \001(\014\022\016\n\006status\030\003 \001(\005\022\017\n\007content\030\004 \001(\014"
  "\022%\n\007storage\030\005 \001(\0132\024.spiderproto.Storage\022"
  ".\n\014segment_list\030\006 \001(\0132\030.spiderproto.Segm"
  "entList\"@\n\tCrawlDocs\022\016\n\006taskid\030\001 \001(\014\022#\n\004"
  "docs\030\002 \003(\0132\025.spiderproto.CrawlDoc\"\033\n\013Pin"
  "gRequest\022\014\n\004name\030\001 \001(\t\":\n\014PingResponse\022\014"
  "\n\004name\030\001 \001(\t\022\017\n\007survive\030\002 \001(\010\022\013\n\003msg\030\003 \001"
  "(\t*-\n\010UrlLevel\022\016\n\nLEVEL_LIST\020\000\022\021\n\rLEVEL_"
  "CONTENT\020\0012\327\001\n\010Schedule\022\?\n\010add_task\022\026.spi"
  "derproto.BasicTask\032\031.spiderproto.TaskRes"
  "ponse\"\000\022@\n\013add_fetcher\022\024.spiderproto.Fet"
  "cher\032\031.spiderproto.TaskResponse\"\000\022H\n\017add"
  "_crawledtask\022\030.spiderproto.CrawledTask\032\031"
  ".spiderproto.TaskResponse\"\0002\222\001\n\005Fetch\022J\n"
  "\020add_crawlingtask\022\031.spiderproto.Crawling"
  "Task\032\031.spiderproto.TaskResponse\"\000\022=\n\004Pin"
  "g\022\030.spiderproto.PingRequest\032\031.spiderprot"
  "o.PingResponse\"\0002\213\001\n\006Handle\022B\n\014add_crawl"
  "doc\022\025.spiderproto.CrawlDoc\032\031.spiderproto"
  ".TaskResponse\"\000\022=\n\004Ping\022\030.spiderproto.Pi"
  "ngRequest\032\031.spiderproto.PingResponse\"\000b\006"
  "proto3"
,
  "spider.proto", &assign_descriptors_table_spider_2eproto, 2526,
};

void AddDescriptors_spider_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_spider_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_spider_2eproto = []() { AddDescriptors_spider_2eproto(); return true; }();
namespace spiderproto {
const ::google::protobuf::EnumDescriptor* Storage_StorageType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_spider_2eproto);
  return file_level_enum_descriptors_spider_2eproto[0];
}
bool Storage_StorageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Storage_StorageType Storage::STORAGE_HDFS;
const Storage_StorageType Storage::STORAGE_MQ;
const Storage_StorageType Storage::StorageType_MIN;
const Storage_StorageType Storage::StorageType_MAX;
const int Storage::StorageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* UrlLevel_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_spider_2eproto);
  return file_level_enum_descriptors_spider_2eproto[1];
}
bool UrlLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CrawlUrl::InitAsDefaultInstance() {
}
class CrawlUrl::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CrawlUrl::kUrlFieldNumber;
const int CrawlUrl::kLevelFieldNumber;
const int CrawlUrl::kUsedableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CrawlUrl::CrawlUrl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spiderproto.CrawlUrl)
}
CrawlUrl::CrawlUrl(const CrawlUrl& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.url().size() > 0) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&usedable_) -
    reinterpret_cast<char*>(&level_)) + sizeof(usedable_));
  // @@protoc_insertion_point(copy_constructor:spiderproto.CrawlUrl)
}

void CrawlUrl::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CrawlUrl_spider_2eproto.base);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usedable_) -
      reinterpret_cast<char*>(&level_)) + sizeof(usedable_));
}

CrawlUrl::~CrawlUrl() {
  // @@protoc_insertion_point(destructor:spiderproto.CrawlUrl)
  SharedDtor();
}

void CrawlUrl::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CrawlUrl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CrawlUrl& CrawlUrl::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CrawlUrl_spider_2eproto.base);
  return *internal_default_instance();
}


void CrawlUrl::Clear() {
// @@protoc_insertion_point(message_clear_start:spiderproto.CrawlUrl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usedable_) -
      reinterpret_cast<char*>(&level_)) + sizeof(usedable_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CrawlUrl::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CrawlUrl*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // bytes url = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_url();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .spiderproto.UrlLevel level = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::spiderproto::UrlLevel value = static_cast<::spiderproto::UrlLevel>(val);
        msg->set_level(value);
        break;
      }
      // bool usedable = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_usedable(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CrawlUrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spiderproto.CrawlUrl)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .spiderproto.UrlLevel level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_level(static_cast< ::spiderproto::UrlLevel >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool usedable = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usedable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spiderproto.CrawlUrl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spiderproto.CrawlUrl)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CrawlUrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spiderproto.CrawlUrl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes url = 1;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->url(), output);
  }

  // .spiderproto.UrlLevel level = 2;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->level(), output);
  }

  // bool usedable = 3;
  if (this->usedable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->usedable(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spiderproto.CrawlUrl)
}

::google::protobuf::uint8* CrawlUrl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spiderproto.CrawlUrl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes url = 1;
  if (this->url().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->url(), target);
  }

  // .spiderproto.UrlLevel level = 2;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->level(), target);
  }

  // bool usedable = 3;
  if (this->usedable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->usedable(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spiderproto.CrawlUrl)
  return target;
}

size_t CrawlUrl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spiderproto.CrawlUrl)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes url = 1;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->url());
  }

  // .spiderproto.UrlLevel level = 2;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->level());
  }

  // bool usedable = 3;
  if (this->usedable() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CrawlUrl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spiderproto.CrawlUrl)
  GOOGLE_DCHECK_NE(&from, this);
  const CrawlUrl* source =
      ::google::protobuf::DynamicCastToGenerated<CrawlUrl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spiderproto.CrawlUrl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spiderproto.CrawlUrl)
    MergeFrom(*source);
  }
}

void CrawlUrl::MergeFrom(const CrawlUrl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spiderproto.CrawlUrl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.usedable() != 0) {
    set_usedable(from.usedable());
  }
}

void CrawlUrl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spiderproto.CrawlUrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrawlUrl::CopyFrom(const CrawlUrl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spiderproto.CrawlUrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrawlUrl::IsInitialized() const {
  return true;
}

void CrawlUrl::Swap(CrawlUrl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CrawlUrl::InternalSwap(CrawlUrl* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(level_, other->level_);
  swap(usedable_, other->usedable_);
}

::google::protobuf::Metadata CrawlUrl::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_spider_2eproto);
  return ::file_level_metadata_spider_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Feature::InitAsDefaultInstance() {
}
class Feature::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Feature::kDupIgnoreFieldNumber;
const int Feature::kTestingFieldNumber;
const int Feature::kPeriodFieldNumber;
const int Feature::kIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Feature::Feature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spiderproto.Feature)
}
Feature::Feature(const Feature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dup_ignore_, &from.dup_ignore_,
    static_cast<size_t>(reinterpret_cast<char*>(&interval_) -
    reinterpret_cast<char*>(&dup_ignore_)) + sizeof(interval_));
  // @@protoc_insertion_point(copy_constructor:spiderproto.Feature)
}

void Feature::SharedCtor() {
  ::memset(&dup_ignore_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&interval_) -
      reinterpret_cast<char*>(&dup_ignore_)) + sizeof(interval_));
}

Feature::~Feature() {
  // @@protoc_insertion_point(destructor:spiderproto.Feature)
  SharedDtor();
}

void Feature::SharedDtor() {
}

void Feature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Feature& Feature::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Feature_spider_2eproto.base);
  return *internal_default_instance();
}


void Feature::Clear() {
// @@protoc_insertion_point(message_clear_start:spiderproto.Feature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dup_ignore_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&interval_) -
      reinterpret_cast<char*>(&dup_ignore_)) + sizeof(interval_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Feature::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Feature*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // bool dup_ignore = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_dup_ignore(value);
        break;
      }
      // bool testing = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_testing(value);
        break;
      }
      // bool period = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_period(value);
        break;
      }
      // int32 interval = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_interval(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Feature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spiderproto.Feature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool dup_ignore = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dup_ignore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool testing = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &testing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool period = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 interval = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spiderproto.Feature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spiderproto.Feature)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Feature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spiderproto.Feature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool dup_ignore = 1;
  if (this->dup_ignore() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->dup_ignore(), output);
  }

  // bool testing = 2;
  if (this->testing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->testing(), output);
  }

  // bool period = 3;
  if (this->period() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->period(), output);
  }

  // int32 interval = 4;
  if (this->interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->interval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spiderproto.Feature)
}

::google::protobuf::uint8* Feature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spiderproto.Feature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool dup_ignore = 1;
  if (this->dup_ignore() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->dup_ignore(), target);
  }

  // bool testing = 2;
  if (this->testing() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->testing(), target);
  }

  // bool period = 3;
  if (this->period() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->period(), target);
  }

  // int32 interval = 4;
  if (this->interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->interval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spiderproto.Feature)
  return target;
}

size_t Feature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spiderproto.Feature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool dup_ignore = 1;
  if (this->dup_ignore() != 0) {
    total_size += 1 + 1;
  }

  // bool testing = 2;
  if (this->testing() != 0) {
    total_size += 1 + 1;
  }

  // bool period = 3;
  if (this->period() != 0) {
    total_size += 1 + 1;
  }

  // int32 interval = 4;
  if (this->interval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->interval());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Feature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spiderproto.Feature)
  GOOGLE_DCHECK_NE(&from, this);
  const Feature* source =
      ::google::protobuf::DynamicCastToGenerated<Feature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spiderproto.Feature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spiderproto.Feature)
    MergeFrom(*source);
  }
}

void Feature::MergeFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spiderproto.Feature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dup_ignore() != 0) {
    set_dup_ignore(from.dup_ignore());
  }
  if (from.testing() != 0) {
    set_testing(from.testing());
  }
  if (from.period() != 0) {
    set_period(from.period());
  }
  if (from.interval() != 0) {
    set_interval(from.interval());
  }
}

void Feature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spiderproto.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Feature::CopyFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spiderproto.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feature::IsInitialized() const {
  return true;
}

void Feature::Swap(Feature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Feature::InternalSwap(Feature* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(dup_ignore_, other->dup_ignore_);
  swap(testing_, other->testing_);
  swap(period_, other->period_);
  swap(interval_, other->interval_);
}

::google::protobuf::Metadata Feature::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_spider_2eproto);
  return ::file_level_metadata_spider_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LinkRule::InitAsDefaultInstance() {
}
class LinkRule::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkRule::kInLevelFieldNumber;
const int LinkRule::kRulesFieldNumber;
const int LinkRule::kOutLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkRule::LinkRule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spiderproto.LinkRule)
}
LinkRule::LinkRule(const LinkRule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      rules_(from.rules_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&in_level_, &from.in_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&out_level_) -
    reinterpret_cast<char*>(&in_level_)) + sizeof(out_level_));
  // @@protoc_insertion_point(copy_constructor:spiderproto.LinkRule)
}

void LinkRule::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LinkRule_spider_2eproto.base);
  ::memset(&in_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&out_level_) -
      reinterpret_cast<char*>(&in_level_)) + sizeof(out_level_));
}

LinkRule::~LinkRule() {
  // @@protoc_insertion_point(destructor:spiderproto.LinkRule)
  SharedDtor();
}

void LinkRule::SharedDtor() {
}

void LinkRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinkRule& LinkRule::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LinkRule_spider_2eproto.base);
  return *internal_default_instance();
}


void LinkRule::Clear() {
// @@protoc_insertion_point(message_clear_start:spiderproto.LinkRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rules_.Clear();
  ::memset(&in_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&out_level_) -
      reinterpret_cast<char*>(&in_level_)) + sizeof(out_level_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LinkRule::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LinkRule*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .spiderproto.UrlLevel in_level = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::spiderproto::UrlLevel value = static_cast<::spiderproto::UrlLevel>(val);
        msg->set_in_level(value);
        break;
      }
      // repeated bytes rules = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          if (!ptr) goto error;
          parser_till_end = ::google::protobuf::internal::StringParser;
          ::std::string* str = msg->add_rules();
          str->clear();
          object = str;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
          ptr = newend;
          if (ptr >= end) break;
        } while((*reinterpret_cast<const ::google::protobuf::uint64*>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // .spiderproto.UrlLevel out_level = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::spiderproto::UrlLevel value = static_cast<::spiderproto::UrlLevel>(val);
        msg->set_out_level(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LinkRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spiderproto.LinkRule)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .spiderproto.UrlLevel in_level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_in_level(static_cast< ::spiderproto::UrlLevel >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes rules = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_rules()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .spiderproto.UrlLevel out_level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_out_level(static_cast< ::spiderproto::UrlLevel >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spiderproto.LinkRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spiderproto.LinkRule)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LinkRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spiderproto.LinkRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .spiderproto.UrlLevel in_level = 1;
  if (this->in_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->in_level(), output);
  }

  // repeated bytes rules = 2;
  for (int i = 0, n = this->rules_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->rules(i), output);
  }

  // .spiderproto.UrlLevel out_level = 3;
  if (this->out_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->out_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spiderproto.LinkRule)
}

::google::protobuf::uint8* LinkRule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spiderproto.LinkRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .spiderproto.UrlLevel in_level = 1;
  if (this->in_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->in_level(), target);
  }

  // repeated bytes rules = 2;
  for (int i = 0, n = this->rules_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->rules(i), target);
  }

  // .spiderproto.UrlLevel out_level = 3;
  if (this->out_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->out_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spiderproto.LinkRule)
  return target;
}

size_t LinkRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spiderproto.LinkRule)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes rules = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->rules_size());
  for (int i = 0, n = this->rules_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->rules(i));
  }

  // .spiderproto.UrlLevel in_level = 1;
  if (this->in_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->in_level());
  }

  // .spiderproto.UrlLevel out_level = 3;
  if (this->out_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->out_level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinkRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spiderproto.LinkRule)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkRule* source =
      ::google::protobuf::DynamicCastToGenerated<LinkRule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spiderproto.LinkRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spiderproto.LinkRule)
    MergeFrom(*source);
  }
}

void LinkRule::MergeFrom(const LinkRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spiderproto.LinkRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rules_.MergeFrom(from.rules_);
  if (from.in_level() != 0) {
    set_in_level(from.in_level());
  }
  if (from.out_level() != 0) {
    set_out_level(from.out_level());
  }
}

void LinkRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spiderproto.LinkRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkRule::CopyFrom(const LinkRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spiderproto.LinkRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkRule::IsInitialized() const {
  return true;
}

void LinkRule::Swap(LinkRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkRule::InternalSwap(LinkRule* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  rules_.InternalSwap(CastToBase(&other->rules_));
  swap(in_level_, other->in_level_);
  swap(out_level_, other->out_level_);
}

::google::protobuf::Metadata LinkRule::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_spider_2eproto);
  return ::file_level_metadata_spider_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Storage::InitAsDefaultInstance() {
}
class Storage::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Storage::kStoreTypeFieldNumber;
const int Storage::kDestFieldNumber;
const int Storage::kAttachmentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Storage::Storage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spiderproto.Storage)
}
Storage::Storage(const Storage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dest().size() > 0) {
    dest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_);
  }
  attachment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attachment().size() > 0) {
    attachment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attachment_);
  }
  store_type_ = from.store_type_;
  // @@protoc_insertion_point(copy_constructor:spiderproto.Storage)
}

void Storage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Storage_spider_2eproto.base);
  dest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attachment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  store_type_ = 0;
}

Storage::~Storage() {
  // @@protoc_insertion_point(destructor:spiderproto.Storage)
  SharedDtor();
}

void Storage::SharedDtor() {
  dest_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attachment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Storage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Storage& Storage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Storage_spider_2eproto.base);
  return *internal_default_instance();
}


void Storage::Clear() {
// @@protoc_insertion_point(message_clear_start:spiderproto.Storage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attachment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  store_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Storage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Storage*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .spiderproto.Storage.StorageType store_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::spiderproto::Storage_StorageType value = static_cast<::spiderproto::Storage_StorageType>(val);
        msg->set_store_type(value);
        break;
      }
      // bytes dest = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_dest();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // bytes attachment = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_attachment();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Storage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spiderproto.Storage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .spiderproto.Storage.StorageType store_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_store_type(static_cast< ::spiderproto::Storage_StorageType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes dest = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attachment = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attachment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spiderproto.Storage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spiderproto.Storage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Storage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spiderproto.Storage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .spiderproto.Storage.StorageType store_type = 1;
  if (this->store_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->store_type(), output);
  }

  // bytes dest = 2;
  if (this->dest().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->dest(), output);
  }

  // bytes attachment = 3;
  if (this->attachment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->attachment(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spiderproto.Storage)
}

::google::protobuf::uint8* Storage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spiderproto.Storage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .spiderproto.Storage.StorageType store_type = 1;
  if (this->store_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->store_type(), target);
  }

  // bytes dest = 2;
  if (this->dest().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->dest(), target);
  }

  // bytes attachment = 3;
  if (this->attachment().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->attachment(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spiderproto.Storage)
  return target;
}

size_t Storage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spiderproto.Storage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes dest = 2;
  if (this->dest().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->dest());
  }

  // bytes attachment = 3;
  if (this->attachment().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attachment());
  }

  // .spiderproto.Storage.StorageType store_type = 1;
  if (this->store_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->store_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Storage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spiderproto.Storage)
  GOOGLE_DCHECK_NE(&from, this);
  const Storage* source =
      ::google::protobuf::DynamicCastToGenerated<Storage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spiderproto.Storage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spiderproto.Storage)
    MergeFrom(*source);
  }
}

void Storage::MergeFrom(const Storage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spiderproto.Storage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dest().size() > 0) {

    dest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_);
  }
  if (from.attachment().size() > 0) {

    attachment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attachment_);
  }
  if (from.store_type() != 0) {
    set_store_type(from.store_type());
  }
}

void Storage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spiderproto.Storage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Storage::CopyFrom(const Storage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spiderproto.Storage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Storage::IsInitialized() const {
  return true;
}

void Storage::Swap(Storage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Storage::InternalSwap(Storage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dest_.Swap(&other->dest_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  attachment_.Swap(&other->attachment_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(store_type_, other->store_type_);
}

::google::protobuf::Metadata Storage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_spider_2eproto);
  return ::file_level_metadata_spider_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Runtime::InitAsDefaultInstance() {
}
class Runtime::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Runtime::kDownloadDelayFieldNumber;
const int Runtime::kConcurrentReqsFieldNumber;
const int Runtime::kAllowFetchersFieldNumber;
const int Runtime::kDenyFetchersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Runtime::Runtime()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spiderproto.Runtime)
}
Runtime::Runtime(const Runtime& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      allow_fetchers_(from.allow_fetchers_),
      deny_fetchers_(from.deny_fetchers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&download_delay_, &from.download_delay_,
    static_cast<size_t>(reinterpret_cast<char*>(&concurrent_reqs_) -
    reinterpret_cast<char*>(&download_delay_)) + sizeof(concurrent_reqs_));
  // @@protoc_insertion_point(copy_constructor:spiderproto.Runtime)
}

void Runtime::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Runtime_spider_2eproto.base);
  ::memset(&download_delay_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&concurrent_reqs_) -
      reinterpret_cast<char*>(&download_delay_)) + sizeof(concurrent_reqs_));
}

Runtime::~Runtime() {
  // @@protoc_insertion_point(destructor:spiderproto.Runtime)
  SharedDtor();
}

void Runtime::SharedDtor() {
}

void Runtime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Runtime& Runtime::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Runtime_spider_2eproto.base);
  return *internal_default_instance();
}


void Runtime::Clear() {
// @@protoc_insertion_point(message_clear_start:spiderproto.Runtime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allow_fetchers_.Clear();
  deny_fetchers_.Clear();
  ::memset(&download_delay_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&concurrent_reqs_) -
      reinterpret_cast<char*>(&download_delay_)) + sizeof(concurrent_reqs_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Runtime::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Runtime*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // float download_delay = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        float val;
        std::memcpy(&val, ptr, 4);
        ptr += 4;
        msg->set_download_delay(val);
        break;
      }
      // int32 concurrent_reqs = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_concurrent_reqs(value);
        break;
      }
      // repeated bytes allow_fetchers = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          if (!ptr) goto error;
          parser_till_end = ::google::protobuf::internal::StringParser;
          ::std::string* str = msg->add_allow_fetchers();
          str->clear();
          object = str;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
          ptr = newend;
          if (ptr >= end) break;
        } while((*reinterpret_cast<const ::google::protobuf::uint64*>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // repeated bytes deny_fetchers = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          if (!ptr) goto error;
          parser_till_end = ::google::protobuf::internal::StringParser;
          ::std::string* str = msg->add_deny_fetchers();
          str->clear();
          object = str;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
          ptr = newend;
          if (ptr >= end) break;
        } while((*reinterpret_cast<const ::google::protobuf::uint64*>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Runtime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spiderproto.Runtime)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float download_delay = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &download_delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 concurrent_reqs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &concurrent_reqs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes allow_fetchers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_allow_fetchers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes deny_fetchers = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_deny_fetchers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spiderproto.Runtime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spiderproto.Runtime)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Runtime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spiderproto.Runtime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float download_delay = 1;
  if (this->download_delay() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->download_delay(), output);
  }

  // int32 concurrent_reqs = 2;
  if (this->concurrent_reqs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->concurrent_reqs(), output);
  }

  // repeated bytes allow_fetchers = 3;
  for (int i = 0, n = this->allow_fetchers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->allow_fetchers(i), output);
  }

  // repeated bytes deny_fetchers = 4;
  for (int i = 0, n = this->deny_fetchers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->deny_fetchers(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spiderproto.Runtime)
}

::google::protobuf::uint8* Runtime::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spiderproto.Runtime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float download_delay = 1;
  if (this->download_delay() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->download_delay(), target);
  }

  // int32 concurrent_reqs = 2;
  if (this->concurrent_reqs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->concurrent_reqs(), target);
  }

  // repeated bytes allow_fetchers = 3;
  for (int i = 0, n = this->allow_fetchers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->allow_fetchers(i), target);
  }

  // repeated bytes deny_fetchers = 4;
  for (int i = 0, n = this->deny_fetchers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->deny_fetchers(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spiderproto.Runtime)
  return target;
}

size_t Runtime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spiderproto.Runtime)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes allow_fetchers = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->allow_fetchers_size());
  for (int i = 0, n = this->allow_fetchers_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->allow_fetchers(i));
  }

  // repeated bytes deny_fetchers = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->deny_fetchers_size());
  for (int i = 0, n = this->deny_fetchers_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->deny_fetchers(i));
  }

  // float download_delay = 1;
  if (this->download_delay() != 0) {
    total_size += 1 + 4;
  }

  // int32 concurrent_reqs = 2;
  if (this->concurrent_reqs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->concurrent_reqs());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Runtime::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spiderproto.Runtime)
  GOOGLE_DCHECK_NE(&from, this);
  const Runtime* source =
      ::google::protobuf::DynamicCastToGenerated<Runtime>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spiderproto.Runtime)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spiderproto.Runtime)
    MergeFrom(*source);
  }
}

void Runtime::MergeFrom(const Runtime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spiderproto.Runtime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allow_fetchers_.MergeFrom(from.allow_fetchers_);
  deny_fetchers_.MergeFrom(from.deny_fetchers_);
  if (from.download_delay() != 0) {
    set_download_delay(from.download_delay());
  }
  if (from.concurrent_reqs() != 0) {
    set_concurrent_reqs(from.concurrent_reqs());
  }
}

void Runtime::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spiderproto.Runtime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Runtime::CopyFrom(const Runtime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spiderproto.Runtime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Runtime::IsInitialized() const {
  return true;
}

void Runtime::Swap(Runtime* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Runtime::InternalSwap(Runtime* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  allow_fetchers_.InternalSwap(CastToBase(&other->allow_fetchers_));
  deny_fetchers_.InternalSwap(CastToBase(&other->deny_fetchers_));
  swap(download_delay_, other->download_delay_);
  swap(concurrent_reqs_, other->concurrent_reqs_);
}

::google::protobuf::Metadata Runtime::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_spider_2eproto);
  return ::file_level_metadata_spider_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BasicTask::InitAsDefaultInstance() {
  ::spiderproto::_BasicTask_default_instance_._instance.get_mutable()->crawl_list_ = const_cast< ::spiderproto::CrawlUrlList*>(
      ::spiderproto::CrawlUrlList::internal_default_instance());
  ::spiderproto::_BasicTask_default_instance_._instance.get_mutable()->feature_ = const_cast< ::spiderproto::Feature*>(
      ::spiderproto::Feature::internal_default_instance());
  ::spiderproto::_BasicTask_default_instance_._instance.get_mutable()->rule_list_ = const_cast< ::spiderproto::LinkRuleList*>(
      ::spiderproto::LinkRuleList::internal_default_instance());
  ::spiderproto::_BasicTask_default_instance_._instance.get_mutable()->storage_ = const_cast< ::spiderproto::Storage*>(
      ::spiderproto::Storage::internal_default_instance());
  ::spiderproto::_BasicTask_default_instance_._instance.get_mutable()->runtime_ = const_cast< ::spiderproto::Runtime*>(
      ::spiderproto::Runtime::internal_default_instance());
}
class BasicTask::HasBitSetters {
 public:
  static const ::spiderproto::CrawlUrlList& crawl_list(const BasicTask* msg);
  static const ::spiderproto::Feature& feature(const BasicTask* msg);
  static const ::spiderproto::LinkRuleList& rule_list(const BasicTask* msg);
  static const ::spiderproto::Storage& storage(const BasicTask* msg);
  static const ::spiderproto::Runtime& runtime(const BasicTask* msg);
};

const ::spiderproto::CrawlUrlList&
BasicTask::HasBitSetters::crawl_list(const BasicTask* msg) {
  return *msg->crawl_list_;
}
const ::spiderproto::Feature&
BasicTask::HasBitSetters::feature(const BasicTask* msg) {
  return *msg->feature_;
}
const ::spiderproto::LinkRuleList&
BasicTask::HasBitSetters::rule_list(const BasicTask* msg) {
  return *msg->rule_list_;
}
const ::spiderproto::Storage&
BasicTask::HasBitSetters::storage(const BasicTask* msg) {
  return *msg->storage_;
}
const ::spiderproto::Runtime&
BasicTask::HasBitSetters::runtime(const BasicTask* msg) {
  return *msg->runtime_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BasicTask::kTaskidFieldNumber;
const int BasicTask::kNameFieldNumber;
const int BasicTask::kUserFieldNumber;
const int BasicTask::kCrawlListFieldNumber;
const int BasicTask::kFeatureFieldNumber;
const int BasicTask::kRuleListFieldNumber;
const int BasicTask::kStorageFieldNumber;
const int BasicTask::kRuntimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BasicTask::BasicTask()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spiderproto.BasicTask)
}
BasicTask::BasicTask(const BasicTask& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taskid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.taskid().size() > 0) {
    taskid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user().size() > 0) {
    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  if (from.has_crawl_list()) {
    crawl_list_ = new ::spiderproto::CrawlUrlList(*from.crawl_list_);
  } else {
    crawl_list_ = NULL;
  }
  if (from.has_feature()) {
    feature_ = new ::spiderproto::Feature(*from.feature_);
  } else {
    feature_ = NULL;
  }
  if (from.has_rule_list()) {
    rule_list_ = new ::spiderproto::LinkRuleList(*from.rule_list_);
  } else {
    rule_list_ = NULL;
  }
  if (from.has_storage()) {
    storage_ = new ::spiderproto::Storage(*from.storage_);
  } else {
    storage_ = NULL;
  }
  if (from.has_runtime()) {
    runtime_ = new ::spiderproto::Runtime(*from.runtime_);
  } else {
    runtime_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:spiderproto.BasicTask)
}

void BasicTask::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BasicTask_spider_2eproto.base);
  taskid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&crawl_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&runtime_) -
      reinterpret_cast<char*>(&crawl_list_)) + sizeof(runtime_));
}

BasicTask::~BasicTask() {
  // @@protoc_insertion_point(destructor:spiderproto.BasicTask)
  SharedDtor();
}

void BasicTask::SharedDtor() {
  taskid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete crawl_list_;
  if (this != internal_default_instance()) delete feature_;
  if (this != internal_default_instance()) delete rule_list_;
  if (this != internal_default_instance()) delete storage_;
  if (this != internal_default_instance()) delete runtime_;
}

void BasicTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BasicTask& BasicTask::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BasicTask_spider_2eproto.base);
  return *internal_default_instance();
}


void BasicTask::Clear() {
// @@protoc_insertion_point(message_clear_start:spiderproto.BasicTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taskid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && crawl_list_ != NULL) {
    delete crawl_list_;
  }
  crawl_list_ = NULL;
  if (GetArenaNoVirtual() == NULL && feature_ != NULL) {
    delete feature_;
  }
  feature_ = NULL;
  if (GetArenaNoVirtual() == NULL && rule_list_ != NULL) {
    delete rule_list_;
  }
  rule_list_ = NULL;
  if (GetArenaNoVirtual() == NULL && storage_ != NULL) {
    delete storage_;
  }
  storage_ = NULL;
  if (GetArenaNoVirtual() == NULL && runtime_ != NULL) {
    delete runtime_;
  }
  runtime_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BasicTask::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BasicTask*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // bytes taskid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_taskid();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // bytes name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_name();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // bytes user = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_user();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .spiderproto.CrawlUrlList crawl_list = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::spiderproto::CrawlUrlList::_InternalParse;
        object = msg->mutable_crawl_list();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .spiderproto.Feature feature = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::spiderproto::Feature::_InternalParse;
        object = msg->mutable_feature();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .spiderproto.LinkRuleList rule_list = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::spiderproto::LinkRuleList::_InternalParse;
        object = msg->mutable_rule_list();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .spiderproto.Storage storage = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::spiderproto::Storage::_InternalParse;
        object = msg->mutable_storage();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .spiderproto.Runtime runtime = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::spiderproto::Runtime::_InternalParse;
        object = msg->mutable_runtime();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BasicTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spiderproto.BasicTask)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes taskid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_taskid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes user = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .spiderproto.CrawlUrlList crawl_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_crawl_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .spiderproto.Feature feature = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_feature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .spiderproto.LinkRuleList rule_list = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rule_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .spiderproto.Storage storage = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_storage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .spiderproto.Runtime runtime = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_runtime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spiderproto.BasicTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spiderproto.BasicTask)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BasicTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spiderproto.BasicTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes taskid = 1;
  if (this->taskid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->taskid(), output);
  }

  // bytes name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // bytes user = 3;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->user(), output);
  }

  // .spiderproto.CrawlUrlList crawl_list = 4;
  if (this->has_crawl_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::crawl_list(this), output);
  }

  // .spiderproto.Feature feature = 5;
  if (this->has_feature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::feature(this), output);
  }

  // .spiderproto.LinkRuleList rule_list = 6;
  if (this->has_rule_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::rule_list(this), output);
  }

  // .spiderproto.Storage storage = 7;
  if (this->has_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::storage(this), output);
  }

  // .spiderproto.Runtime runtime = 8;
  if (this->has_runtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::runtime(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spiderproto.BasicTask)
}

::google::protobuf::uint8* BasicTask::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spiderproto.BasicTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes taskid = 1;
  if (this->taskid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->taskid(), target);
  }

  // bytes name = 2;
  if (this->name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // bytes user = 3;
  if (this->user().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->user(), target);
  }

  // .spiderproto.CrawlUrlList crawl_list = 4;
  if (this->has_crawl_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::crawl_list(this), deterministic, target);
  }

  // .spiderproto.Feature feature = 5;
  if (this->has_feature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::feature(this), deterministic, target);
  }

  // .spiderproto.LinkRuleList rule_list = 6;
  if (this->has_rule_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::rule_list(this), deterministic, target);
  }

  // .spiderproto.Storage storage = 7;
  if (this->has_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::storage(this), deterministic, target);
  }

  // .spiderproto.Runtime runtime = 8;
  if (this->has_runtime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::runtime(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spiderproto.BasicTask)
  return target;
}

size_t BasicTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spiderproto.BasicTask)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes taskid = 1;
  if (this->taskid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->taskid());
  }

  // bytes name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // bytes user = 3;
  if (this->user().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->user());
  }

  // .spiderproto.CrawlUrlList crawl_list = 4;
  if (this->has_crawl_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *crawl_list_);
  }

  // .spiderproto.Feature feature = 5;
  if (this->has_feature()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *feature_);
  }

  // .spiderproto.LinkRuleList rule_list = 6;
  if (this->has_rule_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *rule_list_);
  }

  // .spiderproto.Storage storage = 7;
  if (this->has_storage()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *storage_);
  }

  // .spiderproto.Runtime runtime = 8;
  if (this->has_runtime()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *runtime_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BasicTask::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spiderproto.BasicTask)
  GOOGLE_DCHECK_NE(&from, this);
  const BasicTask* source =
      ::google::protobuf::DynamicCastToGenerated<BasicTask>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spiderproto.BasicTask)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spiderproto.BasicTask)
    MergeFrom(*source);
  }
}

void BasicTask::MergeFrom(const BasicTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spiderproto.BasicTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.taskid().size() > 0) {

    taskid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.user().size() > 0) {

    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  if (from.has_crawl_list()) {
    mutable_crawl_list()->::spiderproto::CrawlUrlList::MergeFrom(from.crawl_list());
  }
  if (from.has_feature()) {
    mutable_feature()->::spiderproto::Feature::MergeFrom(from.feature());
  }
  if (from.has_rule_list()) {
    mutable_rule_list()->::spiderproto::LinkRuleList::MergeFrom(from.rule_list());
  }
  if (from.has_storage()) {
    mutable_storage()->::spiderproto::Storage::MergeFrom(from.storage());
  }
  if (from.has_runtime()) {
    mutable_runtime()->::spiderproto::Runtime::MergeFrom(from.runtime());
  }
}

void BasicTask::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spiderproto.BasicTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasicTask::CopyFrom(const BasicTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spiderproto.BasicTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicTask::IsInitialized() const {
  return true;
}

void BasicTask::Swap(BasicTask* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BasicTask::InternalSwap(BasicTask* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  taskid_.Swap(&other->taskid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_.Swap(&other->user_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(crawl_list_, other->crawl_list_);
  swap(feature_, other->feature_);
  swap(rule_list_, other->rule_list_);
  swap(storage_, other->storage_);
  swap(runtime_, other->runtime_);
}

::google::protobuf::Metadata BasicTask::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_spider_2eproto);
  return ::file_level_metadata_spider_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CrawlUrlList::InitAsDefaultInstance() {
}
class CrawlUrlList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CrawlUrlList::kCrawlUrlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CrawlUrlList::CrawlUrlList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spiderproto.CrawlUrlList)
}
CrawlUrlList::CrawlUrlList(const CrawlUrlList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      crawl_urls_(from.crawl_urls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:spiderproto.CrawlUrlList)
}

void CrawlUrlList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CrawlUrlList_spider_2eproto.base);
}

CrawlUrlList::~CrawlUrlList() {
  // @@protoc_insertion_point(destructor:spiderproto.CrawlUrlList)
  SharedDtor();
}

void CrawlUrlList::SharedDtor() {
}

void CrawlUrlList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CrawlUrlList& CrawlUrlList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CrawlUrlList_spider_2eproto.base);
  return *internal_default_instance();
}


void CrawlUrlList::Clear() {
// @@protoc_insertion_point(message_clear_start:spiderproto.CrawlUrlList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  crawl_urls_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CrawlUrlList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CrawlUrlList*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // repeated .spiderproto.CrawlUrl crawl_urls = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          if (!ptr) goto error;
          parser_till_end = ::spiderproto::CrawlUrl::_InternalParse;
          object = msg->add_crawl_urls();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
          ptr = newend;
          if (ptr >= end) break;
        } while((*reinterpret_cast<const ::google::protobuf::uint64*>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CrawlUrlList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spiderproto.CrawlUrlList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .spiderproto.CrawlUrl crawl_urls = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_crawl_urls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spiderproto.CrawlUrlList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spiderproto.CrawlUrlList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CrawlUrlList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spiderproto.CrawlUrlList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .spiderproto.CrawlUrl crawl_urls = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->crawl_urls_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->crawl_urls(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spiderproto.CrawlUrlList)
}

::google::protobuf::uint8* CrawlUrlList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spiderproto.CrawlUrlList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .spiderproto.CrawlUrl crawl_urls = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->crawl_urls_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->crawl_urls(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spiderproto.CrawlUrlList)
  return target;
}

size_t CrawlUrlList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spiderproto.CrawlUrlList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .spiderproto.CrawlUrl crawl_urls = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->crawl_urls_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->crawl_urls(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CrawlUrlList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spiderproto.CrawlUrlList)
  GOOGLE_DCHECK_NE(&from, this);
  const CrawlUrlList* source =
      ::google::protobuf::DynamicCastToGenerated<CrawlUrlList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spiderproto.CrawlUrlList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spiderproto.CrawlUrlList)
    MergeFrom(*source);
  }
}

void CrawlUrlList::MergeFrom(const CrawlUrlList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spiderproto.CrawlUrlList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  crawl_urls_.MergeFrom(from.crawl_urls_);
}

void CrawlUrlList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spiderproto.CrawlUrlList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrawlUrlList::CopyFrom(const CrawlUrlList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spiderproto.CrawlUrlList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrawlUrlList::IsInitialized() const {
  return true;
}

void CrawlUrlList::Swap(CrawlUrlList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CrawlUrlList::InternalSwap(CrawlUrlList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&crawl_urls_)->InternalSwap(CastToBase(&other->crawl_urls_));
}

::google::protobuf::Metadata CrawlUrlList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_spider_2eproto);
  return ::file_level_metadata_spider_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LinkRuleList::InitAsDefaultInstance() {
}
class LinkRuleList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkRuleList::kRulesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkRuleList::LinkRuleList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spiderproto.LinkRuleList)
}
LinkRuleList::LinkRuleList(const LinkRuleList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      rules_(from.rules_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:spiderproto.LinkRuleList)
}

void LinkRuleList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LinkRuleList_spider_2eproto.base);
}

LinkRuleList::~LinkRuleList() {
  // @@protoc_insertion_point(destructor:spiderproto.LinkRuleList)
  SharedDtor();
}

void LinkRuleList::SharedDtor() {
}

void LinkRuleList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinkRuleList& LinkRuleList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LinkRuleList_spider_2eproto.base);
  return *internal_default_instance();
}


void LinkRuleList::Clear() {
// @@protoc_insertion_point(message_clear_start:spiderproto.LinkRuleList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rules_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LinkRuleList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LinkRuleList*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // repeated .spiderproto.LinkRule rules = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          if (!ptr) goto error;
          parser_till_end = ::spiderproto::LinkRule::_InternalParse;
          object = msg->add_rules();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
          ptr = newend;
          if (ptr >= end) break;
        } while((*reinterpret_cast<const ::google::protobuf::uint64*>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LinkRuleList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spiderproto.LinkRuleList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .spiderproto.LinkRule rules = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rules()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spiderproto.LinkRuleList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spiderproto.LinkRuleList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LinkRuleList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spiderproto.LinkRuleList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .spiderproto.LinkRule rules = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rules_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->rules(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spiderproto.LinkRuleList)
}

::google::protobuf::uint8* LinkRuleList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spiderproto.LinkRuleList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .spiderproto.LinkRule rules = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rules_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->rules(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spiderproto.LinkRuleList)
  return target;
}

size_t LinkRuleList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spiderproto.LinkRuleList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .spiderproto.LinkRule rules = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->rules_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rules(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinkRuleList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spiderproto.LinkRuleList)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkRuleList* source =
      ::google::protobuf::DynamicCastToGenerated<LinkRuleList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spiderproto.LinkRuleList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spiderproto.LinkRuleList)
    MergeFrom(*source);
  }
}

void LinkRuleList::MergeFrom(const LinkRuleList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spiderproto.LinkRuleList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rules_.MergeFrom(from.rules_);
}

void LinkRuleList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spiderproto.LinkRuleList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkRuleList::CopyFrom(const LinkRuleList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spiderproto.LinkRuleList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkRuleList::IsInitialized() const {
  return true;
}

void LinkRuleList::Swap(LinkRuleList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkRuleList::InternalSwap(LinkRuleList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&rules_)->InternalSwap(CastToBase(&other->rules_));
}

::google::protobuf::Metadata LinkRuleList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_spider_2eproto);
  return ::file_level_metadata_spider_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CrawlingTask::InitAsDefaultInstance() {
  ::spiderproto::_CrawlingTask_default_instance_._instance.get_mutable()->storage_ = const_cast< ::spiderproto::Storage*>(
      ::spiderproto::Storage::internal_default_instance());
}
class CrawlingTask::HasBitSetters {
 public:
  static const ::spiderproto::Storage& storage(const CrawlingTask* msg);
};

const ::spiderproto::Storage&
CrawlingTask::HasBitSetters::storage(const CrawlingTask* msg) {
  return *msg->storage_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CrawlingTask::kTaskidFieldNumber;
const int CrawlingTask::kFetcherFieldNumber;
const int CrawlingTask::kCrawlUrlsFieldNumber;
const int CrawlingTask::kRulesFieldNumber;
const int CrawlingTask::kStorageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CrawlingTask::CrawlingTask()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spiderproto.CrawlingTask)
}
CrawlingTask::CrawlingTask(const CrawlingTask& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      crawl_urls_(from.crawl_urls_),
      rules_(from.rules_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taskid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.taskid().size() > 0) {
    taskid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  fetcher_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.fetcher().size() > 0) {
    fetcher_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fetcher_);
  }
  if (from.has_storage()) {
    storage_ = new ::spiderproto::Storage(*from.storage_);
  } else {
    storage_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:spiderproto.CrawlingTask)
}

void CrawlingTask::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CrawlingTask_spider_2eproto.base);
  taskid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fetcher_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  storage_ = NULL;
}

CrawlingTask::~CrawlingTask() {
  // @@protoc_insertion_point(destructor:spiderproto.CrawlingTask)
  SharedDtor();
}

void CrawlingTask::SharedDtor() {
  taskid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fetcher_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete storage_;
}

void CrawlingTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CrawlingTask& CrawlingTask::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CrawlingTask_spider_2eproto.base);
  return *internal_default_instance();
}


void CrawlingTask::Clear() {
// @@protoc_insertion_point(message_clear_start:spiderproto.CrawlingTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  crawl_urls_.Clear();
  rules_.Clear();
  taskid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fetcher_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && storage_ != NULL) {
    delete storage_;
  }
  storage_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CrawlingTask::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CrawlingTask*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // bytes taskid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_taskid();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // bytes fetcher = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_fetcher();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // repeated .spiderproto.CrawlUrl crawl_urls = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          if (!ptr) goto error;
          parser_till_end = ::spiderproto::CrawlUrl::_InternalParse;
          object = msg->add_crawl_urls();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
          ptr = newend;
          if (ptr >= end) break;
        } while((*reinterpret_cast<const ::google::protobuf::uint64*>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // repeated .spiderproto.LinkRule rules = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          if (!ptr) goto error;
          parser_till_end = ::spiderproto::LinkRule::_InternalParse;
          object = msg->add_rules();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
          ptr = newend;
          if (ptr >= end) break;
        } while((*reinterpret_cast<const ::google::protobuf::uint64*>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // .spiderproto.Storage storage = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::spiderproto::Storage::_InternalParse;
        object = msg->mutable_storage();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CrawlingTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spiderproto.CrawlingTask)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes taskid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_taskid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes fetcher = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fetcher()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .spiderproto.CrawlUrl crawl_urls = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_crawl_urls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .spiderproto.LinkRule rules = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rules()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .spiderproto.Storage storage = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_storage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spiderproto.CrawlingTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spiderproto.CrawlingTask)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CrawlingTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spiderproto.CrawlingTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes taskid = 1;
  if (this->taskid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->taskid(), output);
  }

  // bytes fetcher = 2;
  if (this->fetcher().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->fetcher(), output);
  }

  // repeated .spiderproto.CrawlUrl crawl_urls = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->crawl_urls_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->crawl_urls(static_cast<int>(i)),
      output);
  }

  // repeated .spiderproto.LinkRule rules = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rules_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->rules(static_cast<int>(i)),
      output);
  }

  // .spiderproto.Storage storage = 5;
  if (this->has_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::storage(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spiderproto.CrawlingTask)
}

::google::protobuf::uint8* CrawlingTask::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spiderproto.CrawlingTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes taskid = 1;
  if (this->taskid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->taskid(), target);
  }

  // bytes fetcher = 2;
  if (this->fetcher().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->fetcher(), target);
  }

  // repeated .spiderproto.CrawlUrl crawl_urls = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->crawl_urls_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->crawl_urls(static_cast<int>(i)), deterministic, target);
  }

  // repeated .spiderproto.LinkRule rules = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rules_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->rules(static_cast<int>(i)), deterministic, target);
  }

  // .spiderproto.Storage storage = 5;
  if (this->has_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::storage(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spiderproto.CrawlingTask)
  return target;
}

size_t CrawlingTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spiderproto.CrawlingTask)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .spiderproto.CrawlUrl crawl_urls = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->crawl_urls_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->crawl_urls(static_cast<int>(i)));
    }
  }

  // repeated .spiderproto.LinkRule rules = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->rules_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rules(static_cast<int>(i)));
    }
  }

  // bytes taskid = 1;
  if (this->taskid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->taskid());
  }

  // bytes fetcher = 2;
  if (this->fetcher().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->fetcher());
  }

  // .spiderproto.Storage storage = 5;
  if (this->has_storage()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *storage_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CrawlingTask::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spiderproto.CrawlingTask)
  GOOGLE_DCHECK_NE(&from, this);
  const CrawlingTask* source =
      ::google::protobuf::DynamicCastToGenerated<CrawlingTask>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spiderproto.CrawlingTask)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spiderproto.CrawlingTask)
    MergeFrom(*source);
  }
}

void CrawlingTask::MergeFrom(const CrawlingTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spiderproto.CrawlingTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  crawl_urls_.MergeFrom(from.crawl_urls_);
  rules_.MergeFrom(from.rules_);
  if (from.taskid().size() > 0) {

    taskid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  if (from.fetcher().size() > 0) {

    fetcher_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fetcher_);
  }
  if (from.has_storage()) {
    mutable_storage()->::spiderproto::Storage::MergeFrom(from.storage());
  }
}

void CrawlingTask::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spiderproto.CrawlingTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrawlingTask::CopyFrom(const CrawlingTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spiderproto.CrawlingTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrawlingTask::IsInitialized() const {
  return true;
}

void CrawlingTask::Swap(CrawlingTask* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CrawlingTask::InternalSwap(CrawlingTask* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&crawl_urls_)->InternalSwap(CastToBase(&other->crawl_urls_));
  CastToBase(&rules_)->InternalSwap(CastToBase(&other->rules_));
  taskid_.Swap(&other->taskid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fetcher_.Swap(&other->fetcher_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(storage_, other->storage_);
}

::google::protobuf::Metadata CrawlingTask::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_spider_2eproto);
  return ::file_level_metadata_spider_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CrawledTask::InitAsDefaultInstance() {
  ::spiderproto::_CrawledTask_default_instance_._instance.get_mutable()->crawl_url_ = const_cast< ::spiderproto::CrawlUrl*>(
      ::spiderproto::CrawlUrl::internal_default_instance());
}
class CrawledTask::HasBitSetters {
 public:
  static const ::spiderproto::CrawlUrl& crawl_url(const CrawledTask* msg);
};

const ::spiderproto::CrawlUrl&
CrawledTask::HasBitSetters::crawl_url(const CrawledTask* msg) {
  return *msg->crawl_url_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CrawledTask::kTaskidFieldNumber;
const int CrawledTask::kFetcherFieldNumber;
const int CrawledTask::kCrawlUrlFieldNumber;
const int CrawledTask::kStatusFieldNumber;
const int CrawledTask::kLinksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CrawledTask::CrawledTask()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spiderproto.CrawledTask)
}
CrawledTask::CrawledTask(const CrawledTask& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      links_(from.links_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taskid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.taskid().size() > 0) {
    taskid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  fetcher_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.fetcher().size() > 0) {
    fetcher_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fetcher_);
  }
  if (from.has_crawl_url()) {
    crawl_url_ = new ::spiderproto::CrawlUrl(*from.crawl_url_);
  } else {
    crawl_url_ = NULL;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:spiderproto.CrawledTask)
}

void CrawledTask::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CrawledTask_spider_2eproto.base);
  taskid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fetcher_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&crawl_url_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&crawl_url_)) + sizeof(status_));
}

CrawledTask::~CrawledTask() {
  // @@protoc_insertion_point(destructor:spiderproto.CrawledTask)
  SharedDtor();
}

void CrawledTask::SharedDtor() {
  taskid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fetcher_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete crawl_url_;
}

void CrawledTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CrawledTask& CrawledTask::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CrawledTask_spider_2eproto.base);
  return *internal_default_instance();
}


void CrawledTask::Clear() {
// @@protoc_insertion_point(message_clear_start:spiderproto.CrawledTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  links_.Clear();
  taskid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fetcher_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && crawl_url_ != NULL) {
    delete crawl_url_;
  }
  crawl_url_ = NULL;
  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CrawledTask::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CrawledTask*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // bytes taskid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_taskid();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // bytes fetcher = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_fetcher();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .spiderproto.CrawlUrl crawl_url = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::spiderproto::CrawlUrl::_InternalParse;
        object = msg->mutable_crawl_url();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // int32 status = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_status(value);
        break;
      }
      // repeated .spiderproto.CrawlUrl links = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          if (!ptr) goto error;
          parser_till_end = ::spiderproto::CrawlUrl::_InternalParse;
          object = msg->add_links();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
          ptr = newend;
          if (ptr >= end) break;
        } while((*reinterpret_cast<const ::google::protobuf::uint64*>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CrawledTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spiderproto.CrawledTask)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes taskid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_taskid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes fetcher = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fetcher()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .spiderproto.CrawlUrl crawl_url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_crawl_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .spiderproto.CrawlUrl links = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_links()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spiderproto.CrawledTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spiderproto.CrawledTask)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CrawledTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spiderproto.CrawledTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes taskid = 1;
  if (this->taskid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->taskid(), output);
  }

  // bytes fetcher = 2;
  if (this->fetcher().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->fetcher(), output);
  }

  // .spiderproto.CrawlUrl crawl_url = 3;
  if (this->has_crawl_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::crawl_url(this), output);
  }

  // int32 status = 4;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->status(), output);
  }

  // repeated .spiderproto.CrawlUrl links = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->links_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->links(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spiderproto.CrawledTask)
}

::google::protobuf::uint8* CrawledTask::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spiderproto.CrawledTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes taskid = 1;
  if (this->taskid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->taskid(), target);
  }

  // bytes fetcher = 2;
  if (this->fetcher().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->fetcher(), target);
  }

  // .spiderproto.CrawlUrl crawl_url = 3;
  if (this->has_crawl_url()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::crawl_url(this), deterministic, target);
  }

  // int32 status = 4;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->status(), target);
  }

  // repeated .spiderproto.CrawlUrl links = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->links_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->links(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spiderproto.CrawledTask)
  return target;
}

size_t CrawledTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spiderproto.CrawledTask)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .spiderproto.CrawlUrl links = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->links_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->links(static_cast<int>(i)));
    }
  }

  // bytes taskid = 1;
  if (this->taskid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->taskid());
  }

  // bytes fetcher = 2;
  if (this->fetcher().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->fetcher());
  }

  // .spiderproto.CrawlUrl crawl_url = 3;
  if (this->has_crawl_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *crawl_url_);
  }

  // int32 status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CrawledTask::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spiderproto.CrawledTask)
  GOOGLE_DCHECK_NE(&from, this);
  const CrawledTask* source =
      ::google::protobuf::DynamicCastToGenerated<CrawledTask>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spiderproto.CrawledTask)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spiderproto.CrawledTask)
    MergeFrom(*source);
  }
}

void CrawledTask::MergeFrom(const CrawledTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spiderproto.CrawledTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  links_.MergeFrom(from.links_);
  if (from.taskid().size() > 0) {

    taskid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  if (from.fetcher().size() > 0) {

    fetcher_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fetcher_);
  }
  if (from.has_crawl_url()) {
    mutable_crawl_url()->::spiderproto::CrawlUrl::MergeFrom(from.crawl_url());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void CrawledTask::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spiderproto.CrawledTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrawledTask::CopyFrom(const CrawledTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spiderproto.CrawledTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrawledTask::IsInitialized() const {
  return true;
}

void CrawledTask::Swap(CrawledTask* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CrawledTask::InternalSwap(CrawledTask* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&links_)->InternalSwap(CastToBase(&other->links_));
  taskid_.Swap(&other->taskid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fetcher_.Swap(&other->fetcher_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(crawl_url_, other->crawl_url_);
  swap(status_, other->status_);
}

::google::protobuf::Metadata CrawledTask::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_spider_2eproto);
  return ::file_level_metadata_spider_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CrawlStats::InitAsDefaultInstance() {
}
class CrawlStats::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CrawlStats::kTaskidFieldNumber;
const int CrawlStats::kStartTimeFieldNumber;
const int CrawlStats::kLastUpdateFieldNumber;
const int CrawlStats::kTotalUrlFieldNumber;
const int CrawlStats::kSuccessFieldNumber;
const int CrawlStats::kCode40XFieldNumber;
const int CrawlStats::kCode404FieldNumber;
const int CrawlStats::kCode50XFieldNumber;
const int CrawlStats::kCodexxxFieldNumber;
const int CrawlStats::kLinksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CrawlStats::CrawlStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spiderproto.CrawlStats)
}
CrawlStats::CrawlStats(const CrawlStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taskid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.taskid().size() > 0) {
    taskid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  start_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.start_time().size() > 0) {
    start_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_time_);
  }
  last_update_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.last_update().size() > 0) {
    last_update_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_update_);
  }
  ::memcpy(&total_url_, &from.total_url_,
    static_cast<size_t>(reinterpret_cast<char*>(&links_) -
    reinterpret_cast<char*>(&total_url_)) + sizeof(links_));
  // @@protoc_insertion_point(copy_constructor:spiderproto.CrawlStats)
}

void CrawlStats::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CrawlStats_spider_2eproto.base);
  taskid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_update_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&total_url_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&links_) -
      reinterpret_cast<char*>(&total_url_)) + sizeof(links_));
}

CrawlStats::~CrawlStats() {
  // @@protoc_insertion_point(destructor:spiderproto.CrawlStats)
  SharedDtor();
}

void CrawlStats::SharedDtor() {
  taskid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_update_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CrawlStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CrawlStats& CrawlStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CrawlStats_spider_2eproto.base);
  return *internal_default_instance();
}


void CrawlStats::Clear() {
// @@protoc_insertion_point(message_clear_start:spiderproto.CrawlStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taskid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_update_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&total_url_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&links_) -
      reinterpret_cast<char*>(&total_url_)) + sizeof(links_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CrawlStats::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CrawlStats*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // bytes taskid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_taskid();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // bytes start_time = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_start_time();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // bytes last_update = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_last_update();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // int32 total_url = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_total_url(value);
        break;
      }
      // int32 success = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_success(value);
        break;
      }
      // int32 code40x = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_code40x(value);
        break;
      }
      // int32 code404 = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_code404(value);
        break;
      }
      // int32 code50x = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_code50x(value);
        break;
      }
      // int32 codexxx = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_codexxx(value);
        break;
      }
      // int32 links = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_links(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CrawlStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spiderproto.CrawlStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes taskid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_taskid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes start_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes last_update = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_last_update()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 total_url = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_url_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 success = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 code40x = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code40x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 code404 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code404_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 code50x = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code50x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 codexxx = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &codexxx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 links = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &links_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spiderproto.CrawlStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spiderproto.CrawlStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CrawlStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spiderproto.CrawlStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes taskid = 1;
  if (this->taskid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->taskid(), output);
  }

  // bytes start_time = 2;
  if (this->start_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->start_time(), output);
  }

  // bytes last_update = 3;
  if (this->last_update().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->last_update(), output);
  }

  // int32 total_url = 4;
  if (this->total_url() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->total_url(), output);
  }

  // int32 success = 5;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->success(), output);
  }

  // int32 code40x = 6;
  if (this->code40x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->code40x(), output);
  }

  // int32 code404 = 7;
  if (this->code404() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->code404(), output);
  }

  // int32 code50x = 8;
  if (this->code50x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->code50x(), output);
  }

  // int32 codexxx = 9;
  if (this->codexxx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->codexxx(), output);
  }

  // int32 links = 10;
  if (this->links() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->links(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spiderproto.CrawlStats)
}

::google::protobuf::uint8* CrawlStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spiderproto.CrawlStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes taskid = 1;
  if (this->taskid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->taskid(), target);
  }

  // bytes start_time = 2;
  if (this->start_time().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->start_time(), target);
  }

  // bytes last_update = 3;
  if (this->last_update().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->last_update(), target);
  }

  // int32 total_url = 4;
  if (this->total_url() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->total_url(), target);
  }

  // int32 success = 5;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->success(), target);
  }

  // int32 code40x = 6;
  if (this->code40x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->code40x(), target);
  }

  // int32 code404 = 7;
  if (this->code404() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->code404(), target);
  }

  // int32 code50x = 8;
  if (this->code50x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->code50x(), target);
  }

  // int32 codexxx = 9;
  if (this->codexxx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->codexxx(), target);
  }

  // int32 links = 10;
  if (this->links() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->links(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spiderproto.CrawlStats)
  return target;
}

size_t CrawlStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spiderproto.CrawlStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes taskid = 1;
  if (this->taskid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->taskid());
  }

  // bytes start_time = 2;
  if (this->start_time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->start_time());
  }

  // bytes last_update = 3;
  if (this->last_update().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->last_update());
  }

  // int32 total_url = 4;
  if (this->total_url() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total_url());
  }

  // int32 success = 5;
  if (this->success() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->success());
  }

  // int32 code40x = 6;
  if (this->code40x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code40x());
  }

  // int32 code404 = 7;
  if (this->code404() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code404());
  }

  // int32 code50x = 8;
  if (this->code50x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code50x());
  }

  // int32 codexxx = 9;
  if (this->codexxx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->codexxx());
  }

  // int32 links = 10;
  if (this->links() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->links());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CrawlStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spiderproto.CrawlStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CrawlStats* source =
      ::google::protobuf::DynamicCastToGenerated<CrawlStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spiderproto.CrawlStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spiderproto.CrawlStats)
    MergeFrom(*source);
  }
}

void CrawlStats::MergeFrom(const CrawlStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spiderproto.CrawlStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.taskid().size() > 0) {

    taskid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  if (from.start_time().size() > 0) {

    start_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_time_);
  }
  if (from.last_update().size() > 0) {

    last_update_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_update_);
  }
  if (from.total_url() != 0) {
    set_total_url(from.total_url());
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
  if (from.code40x() != 0) {
    set_code40x(from.code40x());
  }
  if (from.code404() != 0) {
    set_code404(from.code404());
  }
  if (from.code50x() != 0) {
    set_code50x(from.code50x());
  }
  if (from.codexxx() != 0) {
    set_codexxx(from.codexxx());
  }
  if (from.links() != 0) {
    set_links(from.links());
  }
}

void CrawlStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spiderproto.CrawlStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrawlStats::CopyFrom(const CrawlStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spiderproto.CrawlStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrawlStats::IsInitialized() const {
  return true;
}

void CrawlStats::Swap(CrawlStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CrawlStats::InternalSwap(CrawlStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  taskid_.Swap(&other->taskid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  start_time_.Swap(&other->start_time_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_update_.Swap(&other->last_update_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(total_url_, other->total_url_);
  swap(success_, other->success_);
  swap(code40x_, other->code40x_);
  swap(code404_, other->code404_);
  swap(code50x_, other->code50x_);
  swap(codexxx_, other->codexxx_);
  swap(links_, other->links_);
}

::google::protobuf::Metadata CrawlStats::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_spider_2eproto);
  return ::file_level_metadata_spider_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TaskResponse::InitAsDefaultInstance() {
}
class TaskResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskResponse::kTaskidFieldNumber;
const int TaskResponse::kCodeFieldNumber;
const int TaskResponse::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskResponse::TaskResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spiderproto.TaskResponse)
}
TaskResponse::TaskResponse(const TaskResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taskid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.taskid().size() > 0) {
    taskid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:spiderproto.TaskResponse)
}

void TaskResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TaskResponse_spider_2eproto.base);
  taskid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
}

TaskResponse::~TaskResponse() {
  // @@protoc_insertion_point(destructor:spiderproto.TaskResponse)
  SharedDtor();
}

void TaskResponse::SharedDtor() {
  taskid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TaskResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskResponse& TaskResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TaskResponse_spider_2eproto.base);
  return *internal_default_instance();
}


void TaskResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:spiderproto.TaskResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taskid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TaskResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TaskResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // bytes taskid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_taskid();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // int32 code = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_code(value);
        break;
      }
      // bytes msg = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_msg();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TaskResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spiderproto.TaskResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes taskid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_taskid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes msg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spiderproto.TaskResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spiderproto.TaskResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TaskResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spiderproto.TaskResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes taskid = 1;
  if (this->taskid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->taskid(), output);
  }

  // int32 code = 2;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->code(), output);
  }

  // bytes msg = 3;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spiderproto.TaskResponse)
}

::google::protobuf::uint8* TaskResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spiderproto.TaskResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes taskid = 1;
  if (this->taskid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->taskid(), target);
  }

  // int32 code = 2;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->code(), target);
  }

  // bytes msg = 3;
  if (this->msg().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spiderproto.TaskResponse)
  return target;
}

size_t TaskResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spiderproto.TaskResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes taskid = 1;
  if (this->taskid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->taskid());
  }

  // bytes msg = 3;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->msg());
  }

  // int32 code = 2;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spiderproto.TaskResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskResponse* source =
      ::google::protobuf::DynamicCastToGenerated<TaskResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spiderproto.TaskResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spiderproto.TaskResponse)
    MergeFrom(*source);
  }
}

void TaskResponse::MergeFrom(const TaskResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spiderproto.TaskResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.taskid().size() > 0) {

    taskid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void TaskResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spiderproto.TaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskResponse::CopyFrom(const TaskResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spiderproto.TaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskResponse::IsInitialized() const {
  return true;
}

void TaskResponse::Swap(TaskResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskResponse::InternalSwap(TaskResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  taskid_.Swap(&other->taskid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  msg_.Swap(&other->msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
}

::google::protobuf::Metadata TaskResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_spider_2eproto);
  return ::file_level_metadata_spider_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Empty::InitAsDefaultInstance() {
}
class Empty::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Empty::Empty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spiderproto.Empty)
}
Empty::Empty(const Empty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:spiderproto.Empty)
}

void Empty::SharedCtor() {
}

Empty::~Empty() {
  // @@protoc_insertion_point(destructor:spiderproto.Empty)
  SharedDtor();
}

void Empty::SharedDtor() {
}

void Empty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Empty& Empty::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Empty_spider_2eproto.base);
  return *internal_default_instance();
}


void Empty::Clear() {
// @@protoc_insertion_point(message_clear_start:spiderproto.Empty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Empty::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Empty*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Empty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spiderproto.Empty)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:spiderproto.Empty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spiderproto.Empty)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Empty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spiderproto.Empty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spiderproto.Empty)
}

::google::protobuf::uint8* Empty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spiderproto.Empty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spiderproto.Empty)
  return target;
}

size_t Empty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spiderproto.Empty)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Empty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spiderproto.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  const Empty* source =
      ::google::protobuf::DynamicCastToGenerated<Empty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spiderproto.Empty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spiderproto.Empty)
    MergeFrom(*source);
  }
}

void Empty::MergeFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spiderproto.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Empty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spiderproto.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Empty::CopyFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spiderproto.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Empty::IsInitialized() const {
  return true;
}

void Empty::Swap(Empty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Empty::InternalSwap(Empty* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Empty::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_spider_2eproto);
  return ::file_level_metadata_spider_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Fetcher::InitAsDefaultInstance() {
}
class Fetcher::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Fetcher::kNameFieldNumber;
const int Fetcher::kAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Fetcher::Fetcher()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spiderproto.Fetcher)
}
Fetcher::Fetcher(const Fetcher& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.addr().size() > 0) {
    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  // @@protoc_insertion_point(copy_constructor:spiderproto.Fetcher)
}

void Fetcher::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Fetcher_spider_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Fetcher::~Fetcher() {
  // @@protoc_insertion_point(destructor:spiderproto.Fetcher)
  SharedDtor();
}

void Fetcher::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Fetcher::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Fetcher& Fetcher::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Fetcher_spider_2eproto.base);
  return *internal_default_instance();
}


void Fetcher::Clear() {
// @@protoc_insertion_point(message_clear_start:spiderproto.Fetcher)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Fetcher::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Fetcher*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // bytes name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_name();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // bytes addr = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_addr();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Fetcher::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spiderproto.Fetcher)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes addr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_addr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spiderproto.Fetcher)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spiderproto.Fetcher)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Fetcher::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spiderproto.Fetcher)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // bytes addr = 2;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->addr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spiderproto.Fetcher)
}

::google::protobuf::uint8* Fetcher::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spiderproto.Fetcher)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // bytes addr = 2;
  if (this->addr().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->addr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spiderproto.Fetcher)
  return target;
}

size_t Fetcher::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spiderproto.Fetcher)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // bytes addr = 2;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->addr());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fetcher::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spiderproto.Fetcher)
  GOOGLE_DCHECK_NE(&from, this);
  const Fetcher* source =
      ::google::protobuf::DynamicCastToGenerated<Fetcher>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spiderproto.Fetcher)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spiderproto.Fetcher)
    MergeFrom(*source);
  }
}

void Fetcher::MergeFrom(const Fetcher& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spiderproto.Fetcher)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.addr().size() > 0) {

    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
}

void Fetcher::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spiderproto.Fetcher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fetcher::CopyFrom(const Fetcher& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spiderproto.Fetcher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fetcher::IsInitialized() const {
  return true;
}

void Fetcher::Swap(Fetcher* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Fetcher::InternalSwap(Fetcher* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  addr_.Swap(&other->addr_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata Fetcher::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_spider_2eproto);
  return ::file_level_metadata_spider_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Segment::InitAsDefaultInstance() {
}
class Segment::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Segment::kWordFieldNumber;
const int Segment::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Segment::Segment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spiderproto.Segment)
}
Segment::Segment(const Segment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  word_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.word().size() > 0) {
    word_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.word_);
  }
  score_ = from.score_;
  // @@protoc_insertion_point(copy_constructor:spiderproto.Segment)
}

void Segment::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Segment_spider_2eproto.base);
  word_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  score_ = 0;
}

Segment::~Segment() {
  // @@protoc_insertion_point(destructor:spiderproto.Segment)
  SharedDtor();
}

void Segment::SharedDtor() {
  word_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Segment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Segment& Segment::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Segment_spider_2eproto.base);
  return *internal_default_instance();
}


void Segment::Clear() {
// @@protoc_insertion_point(message_clear_start:spiderproto.Segment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  word_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  score_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Segment::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Segment*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // bytes word = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_word();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // int32 score = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_score(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Segment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spiderproto.Segment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes word = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_word()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spiderproto.Segment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spiderproto.Segment)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Segment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spiderproto.Segment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes word = 1;
  if (this->word().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->word(), output);
  }

  // int32 score = 2;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spiderproto.Segment)
}

::google::protobuf::uint8* Segment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spiderproto.Segment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes word = 1;
  if (this->word().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->word(), target);
  }

  // int32 score = 2;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spiderproto.Segment)
  return target;
}

size_t Segment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spiderproto.Segment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes word = 1;
  if (this->word().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->word());
  }

  // int32 score = 2;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->score());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Segment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spiderproto.Segment)
  GOOGLE_DCHECK_NE(&from, this);
  const Segment* source =
      ::google::protobuf::DynamicCastToGenerated<Segment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spiderproto.Segment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spiderproto.Segment)
    MergeFrom(*source);
  }
}

void Segment::MergeFrom(const Segment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spiderproto.Segment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.word().size() > 0) {

    word_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.word_);
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
}

void Segment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spiderproto.Segment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Segment::CopyFrom(const Segment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spiderproto.Segment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Segment::IsInitialized() const {
  return true;
}

void Segment::Swap(Segment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Segment::InternalSwap(Segment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  word_.Swap(&other->word_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(score_, other->score_);
}

::google::protobuf::Metadata Segment::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_spider_2eproto);
  return ::file_level_metadata_spider_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SegmentList::InitAsDefaultInstance() {
}
class SegmentList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SegmentList::kSegmentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SegmentList::SegmentList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spiderproto.SegmentList)
}
SegmentList::SegmentList(const SegmentList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      segments_(from.segments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:spiderproto.SegmentList)
}

void SegmentList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SegmentList_spider_2eproto.base);
}

SegmentList::~SegmentList() {
  // @@protoc_insertion_point(destructor:spiderproto.SegmentList)
  SharedDtor();
}

void SegmentList::SharedDtor() {
}

void SegmentList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SegmentList& SegmentList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SegmentList_spider_2eproto.base);
  return *internal_default_instance();
}


void SegmentList::Clear() {
// @@protoc_insertion_point(message_clear_start:spiderproto.SegmentList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segments_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SegmentList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SegmentList*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // repeated .spiderproto.Segment segments = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          if (!ptr) goto error;
          parser_till_end = ::spiderproto::Segment::_InternalParse;
          object = msg->add_segments();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
          ptr = newend;
          if (ptr >= end) break;
        } while((*reinterpret_cast<const ::google::protobuf::uint64*>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SegmentList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spiderproto.SegmentList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .spiderproto.Segment segments = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_segments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spiderproto.SegmentList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spiderproto.SegmentList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SegmentList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spiderproto.SegmentList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .spiderproto.Segment segments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->segments_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->segments(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spiderproto.SegmentList)
}

::google::protobuf::uint8* SegmentList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spiderproto.SegmentList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .spiderproto.Segment segments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->segments_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->segments(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spiderproto.SegmentList)
  return target;
}

size_t SegmentList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spiderproto.SegmentList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .spiderproto.Segment segments = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->segments_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->segments(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SegmentList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spiderproto.SegmentList)
  GOOGLE_DCHECK_NE(&from, this);
  const SegmentList* source =
      ::google::protobuf::DynamicCastToGenerated<SegmentList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spiderproto.SegmentList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spiderproto.SegmentList)
    MergeFrom(*source);
  }
}

void SegmentList::MergeFrom(const SegmentList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spiderproto.SegmentList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segments_.MergeFrom(from.segments_);
}

void SegmentList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spiderproto.SegmentList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentList::CopyFrom(const SegmentList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spiderproto.SegmentList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentList::IsInitialized() const {
  return true;
}

void SegmentList::Swap(SegmentList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SegmentList::InternalSwap(SegmentList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&segments_)->InternalSwap(CastToBase(&other->segments_));
}

::google::protobuf::Metadata SegmentList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_spider_2eproto);
  return ::file_level_metadata_spider_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CrawlDoc::InitAsDefaultInstance() {
  ::spiderproto::_CrawlDoc_default_instance_._instance.get_mutable()->storage_ = const_cast< ::spiderproto::Storage*>(
      ::spiderproto::Storage::internal_default_instance());
  ::spiderproto::_CrawlDoc_default_instance_._instance.get_mutable()->segment_list_ = const_cast< ::spiderproto::SegmentList*>(
      ::spiderproto::SegmentList::internal_default_instance());
}
class CrawlDoc::HasBitSetters {
 public:
  static const ::spiderproto::Storage& storage(const CrawlDoc* msg);
  static const ::spiderproto::SegmentList& segment_list(const CrawlDoc* msg);
};

const ::spiderproto::Storage&
CrawlDoc::HasBitSetters::storage(const CrawlDoc* msg) {
  return *msg->storage_;
}
const ::spiderproto::SegmentList&
CrawlDoc::HasBitSetters::segment_list(const CrawlDoc* msg) {
  return *msg->segment_list_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CrawlDoc::kTaskidFieldNumber;
const int CrawlDoc::kUrlFieldNumber;
const int CrawlDoc::kStatusFieldNumber;
const int CrawlDoc::kContentFieldNumber;
const int CrawlDoc::kStorageFieldNumber;
const int CrawlDoc::kSegmentListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CrawlDoc::CrawlDoc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spiderproto.CrawlDoc)
}
CrawlDoc::CrawlDoc(const CrawlDoc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taskid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.taskid().size() > 0) {
    taskid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.url().size() > 0) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.has_storage()) {
    storage_ = new ::spiderproto::Storage(*from.storage_);
  } else {
    storage_ = NULL;
  }
  if (from.has_segment_list()) {
    segment_list_ = new ::spiderproto::SegmentList(*from.segment_list_);
  } else {
    segment_list_ = NULL;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:spiderproto.CrawlDoc)
}

void CrawlDoc::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CrawlDoc_spider_2eproto.base);
  taskid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&storage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&storage_)) + sizeof(status_));
}

CrawlDoc::~CrawlDoc() {
  // @@protoc_insertion_point(destructor:spiderproto.CrawlDoc)
  SharedDtor();
}

void CrawlDoc::SharedDtor() {
  taskid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete storage_;
  if (this != internal_default_instance()) delete segment_list_;
}

void CrawlDoc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CrawlDoc& CrawlDoc::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CrawlDoc_spider_2eproto.base);
  return *internal_default_instance();
}


void CrawlDoc::Clear() {
// @@protoc_insertion_point(message_clear_start:spiderproto.CrawlDoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taskid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && storage_ != NULL) {
    delete storage_;
  }
  storage_ = NULL;
  if (GetArenaNoVirtual() == NULL && segment_list_ != NULL) {
    delete segment_list_;
  }
  segment_list_ = NULL;
  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CrawlDoc::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CrawlDoc*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // bytes taskid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_taskid();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // bytes url = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_url();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // int32 status = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_status(value);
        break;
      }
      // bytes content = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_content();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .spiderproto.Storage storage = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::spiderproto::Storage::_InternalParse;
        object = msg->mutable_storage();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .spiderproto.SegmentList segment_list = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::spiderproto::SegmentList::_InternalParse;
        object = msg->mutable_segment_list();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CrawlDoc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spiderproto.CrawlDoc)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes taskid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_taskid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes content = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .spiderproto.Storage storage = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_storage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .spiderproto.SegmentList segment_list = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_segment_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spiderproto.CrawlDoc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spiderproto.CrawlDoc)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CrawlDoc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spiderproto.CrawlDoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes taskid = 1;
  if (this->taskid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->taskid(), output);
  }

  // bytes url = 2;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->url(), output);
  }

  // int32 status = 3;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }

  // bytes content = 4;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->content(), output);
  }

  // .spiderproto.Storage storage = 5;
  if (this->has_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::storage(this), output);
  }

  // .spiderproto.SegmentList segment_list = 6;
  if (this->has_segment_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::segment_list(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spiderproto.CrawlDoc)
}

::google::protobuf::uint8* CrawlDoc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spiderproto.CrawlDoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes taskid = 1;
  if (this->taskid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->taskid(), target);
  }

  // bytes url = 2;
  if (this->url().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->url(), target);
  }

  // int32 status = 3;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->status(), target);
  }

  // bytes content = 4;
  if (this->content().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->content(), target);
  }

  // .spiderproto.Storage storage = 5;
  if (this->has_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::storage(this), deterministic, target);
  }

  // .spiderproto.SegmentList segment_list = 6;
  if (this->has_segment_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::segment_list(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spiderproto.CrawlDoc)
  return target;
}

size_t CrawlDoc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spiderproto.CrawlDoc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes taskid = 1;
  if (this->taskid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->taskid());
  }

  // bytes url = 2;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->url());
  }

  // bytes content = 4;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  // .spiderproto.Storage storage = 5;
  if (this->has_storage()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *storage_);
  }

  // .spiderproto.SegmentList segment_list = 6;
  if (this->has_segment_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *segment_list_);
  }

  // int32 status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CrawlDoc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spiderproto.CrawlDoc)
  GOOGLE_DCHECK_NE(&from, this);
  const CrawlDoc* source =
      ::google::protobuf::DynamicCastToGenerated<CrawlDoc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spiderproto.CrawlDoc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spiderproto.CrawlDoc)
    MergeFrom(*source);
  }
}

void CrawlDoc::MergeFrom(const CrawlDoc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spiderproto.CrawlDoc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.taskid().size() > 0) {

    taskid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.has_storage()) {
    mutable_storage()->::spiderproto::Storage::MergeFrom(from.storage());
  }
  if (from.has_segment_list()) {
    mutable_segment_list()->::spiderproto::SegmentList::MergeFrom(from.segment_list());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void CrawlDoc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spiderproto.CrawlDoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrawlDoc::CopyFrom(const CrawlDoc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spiderproto.CrawlDoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrawlDoc::IsInitialized() const {
  return true;
}

void CrawlDoc::Swap(CrawlDoc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CrawlDoc::InternalSwap(CrawlDoc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  taskid_.Swap(&other->taskid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(storage_, other->storage_);
  swap(segment_list_, other->segment_list_);
  swap(status_, other->status_);
}

::google::protobuf::Metadata CrawlDoc::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_spider_2eproto);
  return ::file_level_metadata_spider_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CrawlDocs::InitAsDefaultInstance() {
}
class CrawlDocs::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CrawlDocs::kTaskidFieldNumber;
const int CrawlDocs::kDocsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CrawlDocs::CrawlDocs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spiderproto.CrawlDocs)
}
CrawlDocs::CrawlDocs(const CrawlDocs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      docs_(from.docs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taskid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.taskid().size() > 0) {
    taskid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  // @@protoc_insertion_point(copy_constructor:spiderproto.CrawlDocs)
}

void CrawlDocs::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CrawlDocs_spider_2eproto.base);
  taskid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CrawlDocs::~CrawlDocs() {
  // @@protoc_insertion_point(destructor:spiderproto.CrawlDocs)
  SharedDtor();
}

void CrawlDocs::SharedDtor() {
  taskid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CrawlDocs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CrawlDocs& CrawlDocs::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CrawlDocs_spider_2eproto.base);
  return *internal_default_instance();
}


void CrawlDocs::Clear() {
// @@protoc_insertion_point(message_clear_start:spiderproto.CrawlDocs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  docs_.Clear();
  taskid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CrawlDocs::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CrawlDocs*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // bytes taskid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_taskid();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // repeated .spiderproto.CrawlDoc docs = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          if (!ptr) goto error;
          parser_till_end = ::spiderproto::CrawlDoc::_InternalParse;
          object = msg->add_docs();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
          ptr = newend;
          if (ptr >= end) break;
        } while((*reinterpret_cast<const ::google::protobuf::uint64*>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CrawlDocs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spiderproto.CrawlDocs)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes taskid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_taskid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .spiderproto.CrawlDoc docs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_docs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spiderproto.CrawlDocs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spiderproto.CrawlDocs)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CrawlDocs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spiderproto.CrawlDocs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes taskid = 1;
  if (this->taskid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->taskid(), output);
  }

  // repeated .spiderproto.CrawlDoc docs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->docs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->docs(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spiderproto.CrawlDocs)
}

::google::protobuf::uint8* CrawlDocs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spiderproto.CrawlDocs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes taskid = 1;
  if (this->taskid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->taskid(), target);
  }

  // repeated .spiderproto.CrawlDoc docs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->docs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->docs(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spiderproto.CrawlDocs)
  return target;
}

size_t CrawlDocs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spiderproto.CrawlDocs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .spiderproto.CrawlDoc docs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->docs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->docs(static_cast<int>(i)));
    }
  }

  // bytes taskid = 1;
  if (this->taskid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->taskid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CrawlDocs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spiderproto.CrawlDocs)
  GOOGLE_DCHECK_NE(&from, this);
  const CrawlDocs* source =
      ::google::protobuf::DynamicCastToGenerated<CrawlDocs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spiderproto.CrawlDocs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spiderproto.CrawlDocs)
    MergeFrom(*source);
  }
}

void CrawlDocs::MergeFrom(const CrawlDocs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spiderproto.CrawlDocs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  docs_.MergeFrom(from.docs_);
  if (from.taskid().size() > 0) {

    taskid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
}

void CrawlDocs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spiderproto.CrawlDocs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrawlDocs::CopyFrom(const CrawlDocs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spiderproto.CrawlDocs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrawlDocs::IsInitialized() const {
  return true;
}

void CrawlDocs::Swap(CrawlDocs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CrawlDocs::InternalSwap(CrawlDocs* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&docs_)->InternalSwap(CastToBase(&other->docs_));
  taskid_.Swap(&other->taskid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CrawlDocs::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_spider_2eproto);
  return ::file_level_metadata_spider_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PingRequest::InitAsDefaultInstance() {
}
class PingRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PingRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PingRequest::PingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spiderproto.PingRequest)
}
PingRequest::PingRequest(const PingRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:spiderproto.PingRequest)
}

void PingRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PingRequest_spider_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PingRequest::~PingRequest() {
  // @@protoc_insertion_point(destructor:spiderproto.PingRequest)
  SharedDtor();
}

void PingRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PingRequest& PingRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PingRequest_spider_2eproto.base);
  return *internal_default_instance();
}


void PingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:spiderproto.PingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PingRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PingRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        ctx->extra_parse_data().SetFieldName("spiderproto.PingRequest.name");
        parser_till_end = ::google::protobuf::internal::StringParserUTF8;
        ::std::string* str = msg->mutable_name();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spiderproto.PingRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "spiderproto.PingRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spiderproto.PingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spiderproto.PingRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spiderproto.PingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spiderproto.PingRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spiderproto.PingRequest)
}

::google::protobuf::uint8* PingRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spiderproto.PingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spiderproto.PingRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spiderproto.PingRequest)
  return target;
}

size_t PingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spiderproto.PingRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spiderproto.PingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PingRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PingRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spiderproto.PingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spiderproto.PingRequest)
    MergeFrom(*source);
  }
}

void PingRequest::MergeFrom(const PingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spiderproto.PingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void PingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spiderproto.PingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingRequest::CopyFrom(const PingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spiderproto.PingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingRequest::IsInitialized() const {
  return true;
}

void PingRequest::Swap(PingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PingRequest::InternalSwap(PingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata PingRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_spider_2eproto);
  return ::file_level_metadata_spider_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PingResponse::InitAsDefaultInstance() {
}
class PingResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PingResponse::kNameFieldNumber;
const int PingResponse::kSurviveFieldNumber;
const int PingResponse::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PingResponse::PingResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:spiderproto.PingResponse)
}
PingResponse::PingResponse(const PingResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  survive_ = from.survive_;
  // @@protoc_insertion_point(copy_constructor:spiderproto.PingResponse)
}

void PingResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PingResponse_spider_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  survive_ = false;
}

PingResponse::~PingResponse() {
  // @@protoc_insertion_point(destructor:spiderproto.PingResponse)
  SharedDtor();
}

void PingResponse::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PingResponse& PingResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PingResponse_spider_2eproto.base);
  return *internal_default_instance();
}


void PingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:spiderproto.PingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  survive_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PingResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PingResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        ctx->extra_parse_data().SetFieldName("spiderproto.PingResponse.name");
        parser_till_end = ::google::protobuf::internal::StringParserUTF8;
        ::std::string* str = msg->mutable_name();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // bool survive = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_survive(value);
        break;
      }
      // string msg = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        ctx->extra_parse_data().SetFieldName("spiderproto.PingResponse.msg");
        parser_till_end = ::google::protobuf::internal::StringParserUTF8;
        ::std::string* str = msg->mutable_msg();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:spiderproto.PingResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "spiderproto.PingResponse.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool survive = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &survive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "spiderproto.PingResponse.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:spiderproto.PingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:spiderproto.PingResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:spiderproto.PingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spiderproto.PingResponse.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // bool survive = 2;
  if (this->survive() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->survive(), output);
  }

  // string msg = 3;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spiderproto.PingResponse.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:spiderproto.PingResponse)
}

::google::protobuf::uint8* PingResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:spiderproto.PingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spiderproto.PingResponse.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // bool survive = 2;
  if (this->survive() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->survive(), target);
  }

  // string msg = 3;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "spiderproto.PingResponse.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:spiderproto.PingResponse)
  return target;
}

size_t PingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:spiderproto.PingResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string msg = 3;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // bool survive = 2;
  if (this->survive() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PingResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:spiderproto.PingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PingResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PingResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:spiderproto.PingResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:spiderproto.PingResponse)
    MergeFrom(*source);
  }
}

void PingResponse::MergeFrom(const PingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:spiderproto.PingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.survive() != 0) {
    set_survive(from.survive());
  }
}

void PingResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:spiderproto.PingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingResponse::CopyFrom(const PingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:spiderproto.PingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingResponse::IsInitialized() const {
  return true;
}

void PingResponse::Swap(PingResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PingResponse::InternalSwap(PingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  msg_.Swap(&other->msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(survive_, other->survive_);
}

::google::protobuf::Metadata PingResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_spider_2eproto);
  return ::file_level_metadata_spider_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace spiderproto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::spiderproto::CrawlUrl* Arena::CreateMaybeMessage< ::spiderproto::CrawlUrl >(Arena* arena) {
  return Arena::CreateInternal< ::spiderproto::CrawlUrl >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::spiderproto::Feature* Arena::CreateMaybeMessage< ::spiderproto::Feature >(Arena* arena) {
  return Arena::CreateInternal< ::spiderproto::Feature >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::spiderproto::LinkRule* Arena::CreateMaybeMessage< ::spiderproto::LinkRule >(Arena* arena) {
  return Arena::CreateInternal< ::spiderproto::LinkRule >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::spiderproto::Storage* Arena::CreateMaybeMessage< ::spiderproto::Storage >(Arena* arena) {
  return Arena::CreateInternal< ::spiderproto::Storage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::spiderproto::Runtime* Arena::CreateMaybeMessage< ::spiderproto::Runtime >(Arena* arena) {
  return Arena::CreateInternal< ::spiderproto::Runtime >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::spiderproto::BasicTask* Arena::CreateMaybeMessage< ::spiderproto::BasicTask >(Arena* arena) {
  return Arena::CreateInternal< ::spiderproto::BasicTask >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::spiderproto::CrawlUrlList* Arena::CreateMaybeMessage< ::spiderproto::CrawlUrlList >(Arena* arena) {
  return Arena::CreateInternal< ::spiderproto::CrawlUrlList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::spiderproto::LinkRuleList* Arena::CreateMaybeMessage< ::spiderproto::LinkRuleList >(Arena* arena) {
  return Arena::CreateInternal< ::spiderproto::LinkRuleList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::spiderproto::CrawlingTask* Arena::CreateMaybeMessage< ::spiderproto::CrawlingTask >(Arena* arena) {
  return Arena::CreateInternal< ::spiderproto::CrawlingTask >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::spiderproto::CrawledTask* Arena::CreateMaybeMessage< ::spiderproto::CrawledTask >(Arena* arena) {
  return Arena::CreateInternal< ::spiderproto::CrawledTask >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::spiderproto::CrawlStats* Arena::CreateMaybeMessage< ::spiderproto::CrawlStats >(Arena* arena) {
  return Arena::CreateInternal< ::spiderproto::CrawlStats >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::spiderproto::TaskResponse* Arena::CreateMaybeMessage< ::spiderproto::TaskResponse >(Arena* arena) {
  return Arena::CreateInternal< ::spiderproto::TaskResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::spiderproto::Empty* Arena::CreateMaybeMessage< ::spiderproto::Empty >(Arena* arena) {
  return Arena::CreateInternal< ::spiderproto::Empty >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::spiderproto::Fetcher* Arena::CreateMaybeMessage< ::spiderproto::Fetcher >(Arena* arena) {
  return Arena::CreateInternal< ::spiderproto::Fetcher >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::spiderproto::Segment* Arena::CreateMaybeMessage< ::spiderproto::Segment >(Arena* arena) {
  return Arena::CreateInternal< ::spiderproto::Segment >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::spiderproto::SegmentList* Arena::CreateMaybeMessage< ::spiderproto::SegmentList >(Arena* arena) {
  return Arena::CreateInternal< ::spiderproto::SegmentList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::spiderproto::CrawlDoc* Arena::CreateMaybeMessage< ::spiderproto::CrawlDoc >(Arena* arena) {
  return Arena::CreateInternal< ::spiderproto::CrawlDoc >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::spiderproto::CrawlDocs* Arena::CreateMaybeMessage< ::spiderproto::CrawlDocs >(Arena* arena) {
  return Arena::CreateInternal< ::spiderproto::CrawlDocs >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::spiderproto::PingRequest* Arena::CreateMaybeMessage< ::spiderproto::PingRequest >(Arena* arena) {
  return Arena::CreateInternal< ::spiderproto::PingRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::spiderproto::PingResponse* Arena::CreateMaybeMessage< ::spiderproto::PingResponse >(Arena* arena) {
  return Arena::CreateInternal< ::spiderproto::PingResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
