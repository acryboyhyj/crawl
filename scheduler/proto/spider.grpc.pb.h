// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: spider.proto
#ifndef GRPC_spider_2eproto__INCLUDED
#define GRPC_spider_2eproto__INCLUDED

#include "spider.pb.h"

#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace spiderproto {

class Schedule final {
 public:
  static constexpr char const* service_full_name() {
    return "spiderproto.Schedule";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status add_task(::grpc::ClientContext* context, const ::spiderproto::BasicTask& request, ::spiderproto::TaskResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spiderproto::TaskResponse>> Asyncadd_task(::grpc::ClientContext* context, const ::spiderproto::BasicTask& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spiderproto::TaskResponse>>(Asyncadd_taskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spiderproto::TaskResponse>> PrepareAsyncadd_task(::grpc::ClientContext* context, const ::spiderproto::BasicTask& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spiderproto::TaskResponse>>(PrepareAsyncadd_taskRaw(context, request, cq));
    }
    virtual ::grpc::Status add_fetcher(::grpc::ClientContext* context, const ::spiderproto::Fetcher& request, ::spiderproto::TaskResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spiderproto::TaskResponse>> Asyncadd_fetcher(::grpc::ClientContext* context, const ::spiderproto::Fetcher& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spiderproto::TaskResponse>>(Asyncadd_fetcherRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spiderproto::TaskResponse>> PrepareAsyncadd_fetcher(::grpc::ClientContext* context, const ::spiderproto::Fetcher& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spiderproto::TaskResponse>>(PrepareAsyncadd_fetcherRaw(context, request, cq));
    }
    virtual ::grpc::Status add_crawledtask(::grpc::ClientContext* context, const ::spiderproto::CrawledTask& request, ::spiderproto::TaskResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spiderproto::TaskResponse>> Asyncadd_crawledtask(::grpc::ClientContext* context, const ::spiderproto::CrawledTask& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spiderproto::TaskResponse>>(Asyncadd_crawledtaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spiderproto::TaskResponse>> PrepareAsyncadd_crawledtask(::grpc::ClientContext* context, const ::spiderproto::CrawledTask& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spiderproto::TaskResponse>>(PrepareAsyncadd_crawledtaskRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::spiderproto::TaskResponse>* Asyncadd_taskRaw(::grpc::ClientContext* context, const ::spiderproto::BasicTask& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::spiderproto::TaskResponse>* PrepareAsyncadd_taskRaw(::grpc::ClientContext* context, const ::spiderproto::BasicTask& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::spiderproto::TaskResponse>* Asyncadd_fetcherRaw(::grpc::ClientContext* context, const ::spiderproto::Fetcher& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::spiderproto::TaskResponse>* PrepareAsyncadd_fetcherRaw(::grpc::ClientContext* context, const ::spiderproto::Fetcher& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::spiderproto::TaskResponse>* Asyncadd_crawledtaskRaw(::grpc::ClientContext* context, const ::spiderproto::CrawledTask& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::spiderproto::TaskResponse>* PrepareAsyncadd_crawledtaskRaw(::grpc::ClientContext* context, const ::spiderproto::CrawledTask& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status add_task(::grpc::ClientContext* context, const ::spiderproto::BasicTask& request, ::spiderproto::TaskResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spiderproto::TaskResponse>> Asyncadd_task(::grpc::ClientContext* context, const ::spiderproto::BasicTask& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spiderproto::TaskResponse>>(Asyncadd_taskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spiderproto::TaskResponse>> PrepareAsyncadd_task(::grpc::ClientContext* context, const ::spiderproto::BasicTask& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spiderproto::TaskResponse>>(PrepareAsyncadd_taskRaw(context, request, cq));
    }
    ::grpc::Status add_fetcher(::grpc::ClientContext* context, const ::spiderproto::Fetcher& request, ::spiderproto::TaskResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spiderproto::TaskResponse>> Asyncadd_fetcher(::grpc::ClientContext* context, const ::spiderproto::Fetcher& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spiderproto::TaskResponse>>(Asyncadd_fetcherRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spiderproto::TaskResponse>> PrepareAsyncadd_fetcher(::grpc::ClientContext* context, const ::spiderproto::Fetcher& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spiderproto::TaskResponse>>(PrepareAsyncadd_fetcherRaw(context, request, cq));
    }
    ::grpc::Status add_crawledtask(::grpc::ClientContext* context, const ::spiderproto::CrawledTask& request, ::spiderproto::TaskResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spiderproto::TaskResponse>> Asyncadd_crawledtask(::grpc::ClientContext* context, const ::spiderproto::CrawledTask& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spiderproto::TaskResponse>>(Asyncadd_crawledtaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spiderproto::TaskResponse>> PrepareAsyncadd_crawledtask(::grpc::ClientContext* context, const ::spiderproto::CrawledTask& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spiderproto::TaskResponse>>(PrepareAsyncadd_crawledtaskRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::spiderproto::TaskResponse>* Asyncadd_taskRaw(::grpc::ClientContext* context, const ::spiderproto::BasicTask& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::spiderproto::TaskResponse>* PrepareAsyncadd_taskRaw(::grpc::ClientContext* context, const ::spiderproto::BasicTask& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::spiderproto::TaskResponse>* Asyncadd_fetcherRaw(::grpc::ClientContext* context, const ::spiderproto::Fetcher& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::spiderproto::TaskResponse>* PrepareAsyncadd_fetcherRaw(::grpc::ClientContext* context, const ::spiderproto::Fetcher& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::spiderproto::TaskResponse>* Asyncadd_crawledtaskRaw(::grpc::ClientContext* context, const ::spiderproto::CrawledTask& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::spiderproto::TaskResponse>* PrepareAsyncadd_crawledtaskRaw(::grpc::ClientContext* context, const ::spiderproto::CrawledTask& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_add_task_;
    const ::grpc::internal::RpcMethod rpcmethod_add_fetcher_;
    const ::grpc::internal::RpcMethod rpcmethod_add_crawledtask_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status add_task(::grpc::ServerContext* context, const ::spiderproto::BasicTask* request, ::spiderproto::TaskResponse* response);
    virtual ::grpc::Status add_fetcher(::grpc::ServerContext* context, const ::spiderproto::Fetcher* request, ::spiderproto::TaskResponse* response);
    virtual ::grpc::Status add_crawledtask(::grpc::ServerContext* context, const ::spiderproto::CrawledTask* request, ::spiderproto::TaskResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_add_task : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_add_task() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_add_task() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_task(::grpc::ServerContext* context, const ::spiderproto::BasicTask* request, ::spiderproto::TaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestadd_task(::grpc::ServerContext* context, ::spiderproto::BasicTask* request, ::grpc::ServerAsyncResponseWriter< ::spiderproto::TaskResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_add_fetcher : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_add_fetcher() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_add_fetcher() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_fetcher(::grpc::ServerContext* context, const ::spiderproto::Fetcher* request, ::spiderproto::TaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestadd_fetcher(::grpc::ServerContext* context, ::spiderproto::Fetcher* request, ::grpc::ServerAsyncResponseWriter< ::spiderproto::TaskResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_add_crawledtask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_add_crawledtask() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_add_crawledtask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_crawledtask(::grpc::ServerContext* context, const ::spiderproto::CrawledTask* request, ::spiderproto::TaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestadd_crawledtask(::grpc::ServerContext* context, ::spiderproto::CrawledTask* request, ::grpc::ServerAsyncResponseWriter< ::spiderproto::TaskResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_add_task<WithAsyncMethod_add_fetcher<WithAsyncMethod_add_crawledtask<Service > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_add_task : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_add_task() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_add_task() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_task(::grpc::ServerContext* context, const ::spiderproto::BasicTask* request, ::spiderproto::TaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_add_fetcher : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_add_fetcher() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_add_fetcher() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_fetcher(::grpc::ServerContext* context, const ::spiderproto::Fetcher* request, ::spiderproto::TaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_add_crawledtask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_add_crawledtask() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_add_crawledtask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_crawledtask(::grpc::ServerContext* context, const ::spiderproto::CrawledTask* request, ::spiderproto::TaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_add_task : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_add_task() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_add_task() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_task(::grpc::ServerContext* context, const ::spiderproto::BasicTask* request, ::spiderproto::TaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestadd_task(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_add_fetcher : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_add_fetcher() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_add_fetcher() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_fetcher(::grpc::ServerContext* context, const ::spiderproto::Fetcher* request, ::spiderproto::TaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestadd_fetcher(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_add_crawledtask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_add_crawledtask() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_add_crawledtask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_crawledtask(::grpc::ServerContext* context, const ::spiderproto::CrawledTask* request, ::spiderproto::TaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestadd_crawledtask(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_add_task : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_add_task() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::spiderproto::BasicTask, ::spiderproto::TaskResponse>(std::bind(&WithStreamedUnaryMethod_add_task<BaseClass>::Streamedadd_task, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_add_task() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status add_task(::grpc::ServerContext* context, const ::spiderproto::BasicTask* request, ::spiderproto::TaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedadd_task(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::spiderproto::BasicTask,::spiderproto::TaskResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_add_fetcher : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_add_fetcher() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::spiderproto::Fetcher, ::spiderproto::TaskResponse>(std::bind(&WithStreamedUnaryMethod_add_fetcher<BaseClass>::Streamedadd_fetcher, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_add_fetcher() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status add_fetcher(::grpc::ServerContext* context, const ::spiderproto::Fetcher* request, ::spiderproto::TaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedadd_fetcher(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::spiderproto::Fetcher,::spiderproto::TaskResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_add_crawledtask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_add_crawledtask() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::spiderproto::CrawledTask, ::spiderproto::TaskResponse>(std::bind(&WithStreamedUnaryMethod_add_crawledtask<BaseClass>::Streamedadd_crawledtask, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_add_crawledtask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status add_crawledtask(::grpc::ServerContext* context, const ::spiderproto::CrawledTask* request, ::spiderproto::TaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedadd_crawledtask(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::spiderproto::CrawledTask,::spiderproto::TaskResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_add_task<WithStreamedUnaryMethod_add_fetcher<WithStreamedUnaryMethod_add_crawledtask<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_add_task<WithStreamedUnaryMethod_add_fetcher<WithStreamedUnaryMethod_add_crawledtask<Service > > > StreamedService;
};

class Fetch final {
 public:
  static constexpr char const* service_full_name() {
    return "spiderproto.Fetch";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status add_crawlingtask(::grpc::ClientContext* context, const ::spiderproto::CrawlingTask& request, ::spiderproto::TaskResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spiderproto::TaskResponse>> Asyncadd_crawlingtask(::grpc::ClientContext* context, const ::spiderproto::CrawlingTask& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spiderproto::TaskResponse>>(Asyncadd_crawlingtaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spiderproto::TaskResponse>> PrepareAsyncadd_crawlingtask(::grpc::ClientContext* context, const ::spiderproto::CrawlingTask& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spiderproto::TaskResponse>>(PrepareAsyncadd_crawlingtaskRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::spiderproto::TaskResponse>* Asyncadd_crawlingtaskRaw(::grpc::ClientContext* context, const ::spiderproto::CrawlingTask& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::spiderproto::TaskResponse>* PrepareAsyncadd_crawlingtaskRaw(::grpc::ClientContext* context, const ::spiderproto::CrawlingTask& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status add_crawlingtask(::grpc::ClientContext* context, const ::spiderproto::CrawlingTask& request, ::spiderproto::TaskResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spiderproto::TaskResponse>> Asyncadd_crawlingtask(::grpc::ClientContext* context, const ::spiderproto::CrawlingTask& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spiderproto::TaskResponse>>(Asyncadd_crawlingtaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spiderproto::TaskResponse>> PrepareAsyncadd_crawlingtask(::grpc::ClientContext* context, const ::spiderproto::CrawlingTask& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spiderproto::TaskResponse>>(PrepareAsyncadd_crawlingtaskRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::spiderproto::TaskResponse>* Asyncadd_crawlingtaskRaw(::grpc::ClientContext* context, const ::spiderproto::CrawlingTask& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::spiderproto::TaskResponse>* PrepareAsyncadd_crawlingtaskRaw(::grpc::ClientContext* context, const ::spiderproto::CrawlingTask& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_add_crawlingtask_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status add_crawlingtask(::grpc::ServerContext* context, const ::spiderproto::CrawlingTask* request, ::spiderproto::TaskResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_add_crawlingtask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_add_crawlingtask() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_add_crawlingtask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_crawlingtask(::grpc::ServerContext* context, const ::spiderproto::CrawlingTask* request, ::spiderproto::TaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestadd_crawlingtask(::grpc::ServerContext* context, ::spiderproto::CrawlingTask* request, ::grpc::ServerAsyncResponseWriter< ::spiderproto::TaskResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_add_crawlingtask<Service > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_add_crawlingtask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_add_crawlingtask() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_add_crawlingtask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_crawlingtask(::grpc::ServerContext* context, const ::spiderproto::CrawlingTask* request, ::spiderproto::TaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_add_crawlingtask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_add_crawlingtask() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_add_crawlingtask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_crawlingtask(::grpc::ServerContext* context, const ::spiderproto::CrawlingTask* request, ::spiderproto::TaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestadd_crawlingtask(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_add_crawlingtask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_add_crawlingtask() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::spiderproto::CrawlingTask, ::spiderproto::TaskResponse>(std::bind(&WithStreamedUnaryMethod_add_crawlingtask<BaseClass>::Streamedadd_crawlingtask, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_add_crawlingtask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status add_crawlingtask(::grpc::ServerContext* context, const ::spiderproto::CrawlingTask* request, ::spiderproto::TaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedadd_crawlingtask(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::spiderproto::CrawlingTask,::spiderproto::TaskResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_add_crawlingtask<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_add_crawlingtask<Service > StreamedService;
};

class Handle final {
 public:
  static constexpr char const* service_full_name() {
    return "spiderproto.Handle";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status add_crawldoc(::grpc::ClientContext* context, const ::spiderproto::CrawlDoc& request, ::spiderproto::TaskResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spiderproto::TaskResponse>> Asyncadd_crawldoc(::grpc::ClientContext* context, const ::spiderproto::CrawlDoc& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spiderproto::TaskResponse>>(Asyncadd_crawldocRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spiderproto::TaskResponse>> PrepareAsyncadd_crawldoc(::grpc::ClientContext* context, const ::spiderproto::CrawlDoc& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spiderproto::TaskResponse>>(PrepareAsyncadd_crawldocRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::spiderproto::TaskResponse>* Asyncadd_crawldocRaw(::grpc::ClientContext* context, const ::spiderproto::CrawlDoc& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::spiderproto::TaskResponse>* PrepareAsyncadd_crawldocRaw(::grpc::ClientContext* context, const ::spiderproto::CrawlDoc& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status add_crawldoc(::grpc::ClientContext* context, const ::spiderproto::CrawlDoc& request, ::spiderproto::TaskResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spiderproto::TaskResponse>> Asyncadd_crawldoc(::grpc::ClientContext* context, const ::spiderproto::CrawlDoc& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spiderproto::TaskResponse>>(Asyncadd_crawldocRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spiderproto::TaskResponse>> PrepareAsyncadd_crawldoc(::grpc::ClientContext* context, const ::spiderproto::CrawlDoc& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spiderproto::TaskResponse>>(PrepareAsyncadd_crawldocRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::spiderproto::TaskResponse>* Asyncadd_crawldocRaw(::grpc::ClientContext* context, const ::spiderproto::CrawlDoc& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::spiderproto::TaskResponse>* PrepareAsyncadd_crawldocRaw(::grpc::ClientContext* context, const ::spiderproto::CrawlDoc& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_add_crawldoc_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status add_crawldoc(::grpc::ServerContext* context, const ::spiderproto::CrawlDoc* request, ::spiderproto::TaskResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_add_crawldoc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_add_crawldoc() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_add_crawldoc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_crawldoc(::grpc::ServerContext* context, const ::spiderproto::CrawlDoc* request, ::spiderproto::TaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestadd_crawldoc(::grpc::ServerContext* context, ::spiderproto::CrawlDoc* request, ::grpc::ServerAsyncResponseWriter< ::spiderproto::TaskResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_add_crawldoc<Service > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_add_crawldoc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_add_crawldoc() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_add_crawldoc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_crawldoc(::grpc::ServerContext* context, const ::spiderproto::CrawlDoc* request, ::spiderproto::TaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_add_crawldoc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_add_crawldoc() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_add_crawldoc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_crawldoc(::grpc::ServerContext* context, const ::spiderproto::CrawlDoc* request, ::spiderproto::TaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestadd_crawldoc(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_add_crawldoc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_add_crawldoc() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::spiderproto::CrawlDoc, ::spiderproto::TaskResponse>(std::bind(&WithStreamedUnaryMethod_add_crawldoc<BaseClass>::Streamedadd_crawldoc, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_add_crawldoc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status add_crawldoc(::grpc::ServerContext* context, const ::spiderproto::CrawlDoc* request, ::spiderproto::TaskResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedadd_crawldoc(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::spiderproto::CrawlDoc,::spiderproto::TaskResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_add_crawldoc<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_add_crawldoc<Service > StreamedService;
};

}  // namespace spiderproto


#endif  // GRPC_spider_2eproto__INCLUDED
